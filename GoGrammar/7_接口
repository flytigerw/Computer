

1.侵入式接口:实现类必须明确声明自己实现了某接口

2.接口说明对象的行为:如果谁能来搞定这件事，它就可以调用方法进行处理

3.接口的定义:方法集，没有变量，但可以接口内嵌
  type name interface{
	  f1(args) return_type
  }
 
4.接口可以有值
  type Namer interface{
		xxxx
  }
  var in Namer ---> 值为nil

  接口的实现:只需要实现接口定义的方法即可
  
  可以将 实现类的实例 赋给 接口变量 ---> 多态行为
  接口变量含有实例的指针以及实例类型的方法表
 
5.io.Writer:提供了所有的类型写入bytes的抽象
  io.Reader:代表任意可读取bytes的类型
  io.Closer:代表任意可关闭的值，如文件或网络关闭
  
  type Reader() interface{
	  Read(p []byte) (n int,err error)
  }
  type Closer() interface{
	  Close() error
  }
  
  接口组合:
  type ReadWriter interface{
	  Reader
	  Writer
  }

6.接口变量的类型为动态类型
  检验 接口类型 是否可转为某 实现类类型:
  if v,ok := interface_var.(ImplType); ok{
	  Process(v)
	  return
  }
  也使用type switch进行判断处理
  switch t := shape_var.(type){
	  case *Square:            //必需要添加*
	  case *Circle:
	  case nil:
	  default:
  }
  
  类型分类函数
  func classifier(items...interface{}){     //任意数量，任意类型
	  for _,x := range items{
		  switch x.(type){
			  case:
			  case:
		  }
	  }
  }

7.接口的实现  
  type iface struct{          //接口变量作为参数传递时的开销
	  tab *itab                //包含接口的静态类型信息，实例的动态类型信息，函数表
	  data unsafe.Pointer      //具体实例的内存地址
  }
  
  type itab struct{
	  inter   *interfacetype   //静态类型信息
	  _type   *_type
	  link 	*itab
	  hash    uint32
	  bad     bool
	  inhash  bool 
	  unsed   [2]byte

	  func [1]uintptr          //函数地址表。防止和接口方法对应的具体实例的类型的方法地址表
		              					 //实现接口调用方法的动态分配，一般在每次接口赋值时进行更新
  }
   
  空接口interface{}的优化:空接口没有方法，当某个实例赋值给空接口变量时，iface中tab会直接指向实例的类型
					            		reflect.TypeOf和reflect.ValueOf的参数都是空接口
						            	所以所有参数都会转为空接口 ----> 空接口包含实例的类型

8.func (a Integer) Less (b Integer) bool{
		return a < b 
  }
  编译器可自动生成指针类型的方法
  func (a* Integer) Less (b Integer) bool{
		return *a < b 
  }
  反之则不然

9.接口可通过接口组合形成继承体系
  下层的接口变量可赋值给上层的接口变量
  
10.查询某实例是否实现了某接口 ---> 类型转换即可
   instance.(interface.type)
   
11.反射可以在运行时检查类型和变量
   对于没有源代码的包非常适用
   1)reflect.TypeOf(interface{}) Type 
	   快速获取变量的类型
     其会将变量转换为空接口,空接口中包含了变量的实际类型
	 
   2)reflect.ValueOf(interface{}) Value
      返回的Value为<type,value>
      type m_int int 
	    var x m_int = 1 
      v := reflect.ValueOf(x)
	    v.Type()   ---> 获取顶层类型  --> m_int 
	    v.Kind()   ---> 获取底层类型  --> int 
	    可用reflect的类型常量与之比较判断
	    v.Kind() == reflect.Int 
	    v.Interface() --> 获取value  ---> 1
	    也可以将value进行转型
	    y := v.Interface().(float64)
	  
   3)通过反射修改变量值
    var x float64 = 3.14
	  v := reflect.ValueOf(&x)            //必须根据地址才能修改到原变量
    v = v.Elem()                        //it's necessary
	  if v.CanSet(){
		  fmt.Println("old type  and value:",v.Type(),v.Interface())
		  v.SetFloat(3.2)
		  fmt.Println("new type  and value:",v.Type(),v.Interface())
	  }
    
	4)反射struct
	  type m_struct struct{
		  s1,s2,s3 string 
	  }
	  func(n m_struct)to_string() string{
		  //xxx 
	  }
	  var instance interface{} = m_struct{"hello","my","world}    //空接口接受任意类型   
	 
	  func main(){
		  t := reflect.TypeOf(instance) ----> main.m_struct 
		  v := reflect.ValueOf(instance)
		  v.Kind()                      ----> struct 
		  //通过for循环索引struct的每个字段
		  for i := 0; i<v.NumField(); i++{           //NumField --> 总的字段数量
		  	v.Field(i)                              //索引第i个字段
			  v.Type()
			  v.Interface()
		  }
		
		  res = value.Method(0).call(nil)            //调用m_struct的第一个方法
	  }
	  
	  struct的字段只有当首字母为大写时才可被设置
      

print例子:

type String interface{
	Tostring() string 
} 
type Celsius float64 
func (c Celsius) To_string string {
	return strconv.FormatFloat(float64(c),'f',1,64) + "度"    //1表示保留一位小数
}

type Day int 
var DayName = []string{"星期1","星期2","星期3","星期4","星期5","星期6","星期天"}
func(day Day) To_string() string{
	return DayName[day]
}
//类型Day和Celsius都实现了String接口 ---> 使用多态
func print(args ...interface{}){   //接受任意类型的参数，再使用 switch-type进行类型判断
	for i,arg := range args{
		switch a := arg.(type){
			case String:
				os.Stdout.WriteString(a.to_string())      //根据多态调用相应的类型
			case int:
			    os.Stdout.WriteString(strconv.Itoa(a))
			case string:
			    os.Stdout.WriteString(a)
		}
	}
}

func main(){
	print(Day(1),"温度为:",Celsius(18.33))  ----> 星期二 温度为18.3
}
