
1.TCP可靠性保证
  1)序列号，确认应答，差错控制，超时重传
    a.N号数据到达receiver,receiver发送ack=N+1表明N号数据已经收到，接下来期待N+1号数据
    b.发送方未收到ack
      1)N号数据丢失
      2)N号数据有差错   ----> 接收端通过差错控制，进行校验码的验证
      2)N+1ACK丢失
      然后发送方会因为超时而重传N号数据
      时间limit一般为:2*(报文往返时间)+一个偏差值


  2)窗口控制
    TCP利用窗口控制提高传输速度
    窗口大小为等待确认的数据的最大值
    可以连续发送N,N+1,N+2...多个数据而不必每发送一个就停止等待数据的ACK
    若窗口中的其中一个data确认超时，后面所有的data都要重发
  
  3)流量控制和拥塞控制
    若窗口定的很大，则发送端则可以在短时间内向网络中发送大量的数据
    有两种后果:
     1.超过接收方的接收能力
     2.超过网络的负荷,造成网络拥塞
    最终都会导致数据丢失

    处理:
     1.接收方告知发送方自己的接收能力 ---> 通告窗口大小
     2.发送方感知网络传输能力，用拥塞窗口来表示网络状况
    最终:
     发送窗口 = min{通告窗口，拥塞窗口}

    拥塞窗口的调整算法:慢启动算法
    cwnd:拥塞窗口
    ssthresh:阈值
    a.初始:cwnd = 1
    b.发送方每收到一个ACK,cwnd就倍增
      当cwnd到达阈值时，开始线性增长
    c.发生丢包时，ssthresh设为cwnd的一半
      有两种检测丢包的措施，根据不同的检测方法，采取不同的处理措施
      1.超时检测
        说明网络的确拥堵
        那么窗口要设置的小一点，减缓发送方的发送速度
        于是cwnd = 1    ---> 小于阈值，倍增
      2.快重传
        网络没有那么拥堵
        cwnd /= 2       ---> =阈值，线性增长
    最终，发送窗口 = min{拥塞窗口，通告窗口}
      
2.HTTP和HTTPS
  1)HTTP以 明文 在网络中传输数据 ---> 有风险
    HTTPS传输的数据会经过TLS加密
    client 向server发送请求https://baidu.com,会连接到server的443 port

  2)Https的加密
    a.对称加密
      发送方将内容进行加密
      由于接收方没有解密的钥匙
      所以发送方要将秘钥连同内容一起发给接收方
      问题:秘钥和内容在第一次通信时被截胡 ---> 加密的内部也不再安全
      

    b.非对称加密
      包括一对秘钥:公钥和私钥
      公钥是公开的，任何人都可以持有
      私钥是私有的，不能泄露
      用公钥加密的内容只能用私钥解开.反之亦然
      比如:起始时A含有公钥+密钥
           然后将公钥发送给B
           B生成 对称加密通信 需要使用的秘钥，用公钥加密，发送给A
           即使信息被C拦截，由于C没有解密用的私钥，也不能对其进行解密
           A收到秘钥以后，AB就可以进行对称加密的通信
    
      缺陷:C可能拦截到A发送给B的公钥 
           然后将自己生成的公钥发送给B
           再拦截下次B发送的 用于对称加密的秘钥，并用自己的私钥进行解密

      改进:引入第三方:证书颁发机构CA
      通信流程:
       a.A将公钥Key1发送给CA,向CA申请证书
       b.CA也有自己的公钥和私钥
         CA首先生成证书 
         然后用私钥将证书和Key1加密，并发送给A
       c.A并不解密证书，而是用机构私钥加密的证书转发给B
       d.B收到证书后，会首先验证证书的真伪
         各大浏览器和操作系统都维护了 所有权威证书机构的名称和公钥
         所有B只需要知道机构的名称，就能在本地找到对应的机构公钥
         B按照同样的签名规则，自己也生成一个证书签名，如果两个签名一致，则说明证书有效   
       e.验证成功后，B才能使用机构公钥，解密出A的公钥Key1 ---> 安全地得到公钥
         
         如果证书被C截胡，但C生成的签名会和证书签名不一致(网址签名不一致) ---> 证书无效，不能再解密出公钥

      

3.TCP
  TCP特点
   connection-oriented:UDP协议可以同时向多个主机发送消息，即支持一对多.TCP只支持一对一
   reliable,bytestream

  TCP用于可靠交付:FTP,HTTP
  UDP用于包总量较少的服务DNS,快速发送的服务:多媒体通信

  TCP连接的三次握手
  1)client发出连接建立请求:SYN,seq=x
  2)server接受请求，并发出建立连接请求:ACK,ack=x+1.SYN,seq=y
  3)client接受请求，连接建立
  1),2)都不能携带数据.3)可以

  connect成功返回client收到ACK以后      --> 第二次握手
  accept成功返回是在server收到ACK以后   --> 第三次握手

  在linux系统中查看TCP状态:netstat -napt

  三次握手的原因:
   避免旧的SYN造成的影响
    网络可能拥堵 ---> client可能就会发送多次SYN
    多个SYN可能会陆续到达server,server都会发送SYN+ACK给client
    正常情况下client会根据自身的上下文，判断当前连接是否为一个历史连接
    若是，则client发送RST，终止这次连接
    若不是，则client会发送ACK来建立连接.服务端收到后，则会为此次连接分配相应的资源
    若为两次握手，则server会建立很多连接，浪费服务端资源

  SYN攻击：
   攻击者伪造不同IP地址的SYN发送给server,而server的ACK,SYN无法得到响应 -> server的SYN队列就会被占满,不能正常工作
    若为两次握手，则server会建立很多连接，浪费服务端资源
  解决:
   1)修改内核参数，控制队列大小以及当队列满时应做什么处理
     比如回复RST，放弃连接
   2)使用连接建立定时器，清除长时间没有响应的连接

  SYN队列与Accept队列
   当server接收到client的SYN时，会将其加入到SYN队列
   然后发送ACK,SYN.等待client的ACK
   若server收到client的ACK,则将SYN从SYN队列中移除，放入到Accept队列
   进程调用accept(),从Accept队列中取出连接
   
   若进程处理过慢,会导致Accept队列被占满
   受到SYN攻击时，则会导致SYN队列占满，而Accept队列为空


  若已经建立了连接，但client出现故障怎么办？
  TCP的保活机制:若在一段时间内，网络连接上没有任何数据包的发送，则server会间隔的发送几个探测报文
                若都没有得到响应，则认为当前连接已经死亡.
                若得到响应，则tcp_keepalive_time会重置
  相关内核参数:
   tcp_keepalive_time = 7200  ---> 若2小时内没有任何数据包的发送，则启动保活机制
   tcp_keepalive_intvl = 75   ---> 每次间隔75s发送探测报文
   tcp_keepalive_probes = 9   ---> 若连续9个探测报文没有得到响应，则认为当前连接已经死亡

  TCP四次挥手
   1)client发出释放连接请求:FIN  --> FIN_WAIT1
   2)sever确认释放:ACK           --> CLOSED_WAIT
   3)server发出释放连接请求:FIN  --> LAST_ACK
   4)client确认释放:ACK          --> TIME_WAIT ---> 经过2MSL后进入到close
  client释放连接后，表示不再向server发送数据，但还可以接受数据
  在2)和3)之间,server可能还有其他数据要发送

  MSL:Maximum Segment Lifetiem
   若server没有收到client的ACK,则会超时重传FIN
   若client在2MSL时间里都没有收到FIN,表明client的ACK被server收到了


  MTU:物理链路中一个frame最多能携带的数据量
      即一个IP datagram的最大长度.一般为1500byte
  MSS:除去IP和TCP header之后
      一个IP datagram所能容纳的TCP数据的最大长度
  若IP层有一个超过MTU的数据 --> 那么IP层会将其分片，使其小于MTU
  若一个IP fragment丢失,那么整个IP datagram的所有fragment都得重传
  但IP层本身没有超时重传机制，只能依靠TCP的超时重传
  所以单纯的依靠IP层来完成分片传输是比较没有效率的.
  MSS的作用就在于，当TCP层发现数据超过MSS时，就对其进行分片 ---> 传到IP层时就不用再分片
  当一个TCP 分片(也是一个TCP segment)丢失以后，超时重传即可，不必再重传所有的分片


     
有了MAC地址，为什么还要有IP地址？
  MAC地址没有规律性
  考虑用网桥连接两个局域网net1,net2
  net1和net2中都含有5000w台主机
  那么网桥的交换表需要对每台主机进行记录 ---> 一亿条
  若net1和net2中的主机的地址有规律性可言，比如都是以1010101和1010102开头，则网桥只需要记录两条记录 ---> 层次性地转发 ---> 比如 班级-学生，先将消息送到班级，再送到学生
  IP地址就是这样有规律性的地址 ---> 减少交换表的条目数

网络层的功能:路由选择，不同网络的互联(协议可能不同)

4.分组交付
  1)直接交付
    源主机和目的主机在同一网络中
    最后一个路由器与目标网络之间是直接交付
  2)间接交付
    目的主机没有和源主机处于同一网络中
    中间相隔多个路由器

主机A向主机B发送数据:
1)主机A的肯定需要知道主机B的IP地址
2)判断A与B是否与自己处于同一网络中                      ---> 使用A的netmask进行判断
2)若位于同一网络中，则用B的IP地址查询B的MAC地址         ---> 构建frame
  然后直接交付
3)否则主机A将数据发给自己所在局域网中的某个router,后续转发工作交给router


5.ARP:基于IP地址解析MAC地址
  在物理网络链路上传递数据frame时，必须用到硬件地址
  每个主机都有一个ARP cache:里面含有自己所在的局域网中的 路由器和主机的 IP和MAC地址的映射表
  主机可以发送ARP广播请求，来知道当前局域网中某IP地址对应的MAC地址

  ARP工作在网络层.
  比如:在同一局域网中有主机AB,A知道B的IP地址,A想知道B的MAC地址
  A在IP层发送ARP类型报文 ---> 在链路层封装 ---> frame中含有标志字段，标识报文类型为ARP
  然后A将该frame广播发送
  主机B收到frame以后，进行拆封，将数据交给网络层ARP模块进行解析

  ARP只能实现同一个局域网中的主机或者路由器的 IP地址和MAC地址的映射
  若所要找的主机不再同一个LAN中，就要通过ARP找到本LAN中的某个路由器的硬件地址
  将分组发送给该路由器，让该路由器将分组发给下一个网络.
 
 ////////////////////////////////////////////////////
  使用ARP的四个情景:
  a.发送方是主机，要将IP datagram发送到 本网络中的另一个主机
    此时要用ARP找到目的主机的MAC地址
  b.发送方是主机，要将IP datagram发送到 其他网络中的主机
    此时要用ARP找到某个router的MAC地址。剩下的工作交给router
  c.发送方是router，要将IP datagram发送到 本网络中的另一个主机
    此时要用ARP找到目的主机的MAC地址
  d.发送方是router，要将IP datagram发送到 其他网络中的主机
    此时要用ARP找到另外某个router的MAC地址。剩下的工作交给router
 ///////////////////////////////////////////

6.路由选择:通信子网中的网络节点收到分组以后，会根据目标地址以及当前子网的环境，确定该分组转发的合适路径
  静态路由策略:
   1)广播路由
     将该分组广播到其他所有线路
     当网络通信量很小时，可以使得分组的时延最小
   2)固定路由
     每个网络节点都含有路由表:记录应该转发的下一节点
     当一个分组到达网络节点时，该节点只要根据分组中的目的地址信息，在路由表中查询下一节点
     每个节点的路由表是静态配置的，在相当一段时间内保持不变
     灵活性较差
   3)随机路由
     网络节点随机选择下一转发节点进行转发

  动态路由:路由选择应该根据当前的网络状态进行决定
   工作步骤:
    a.测量并感知网络状态，主要包括网络拓扑结构，流量等
    b.根据测量结果更新路由表
    c.根据路由表选择转发节点
  1)集中路由选择
    由控制中心根据网络状态生成最新的路由表，并转发给各个网络节点
    各个网络节点不需要进行路由选择计算
  2)分布路由选择
    每个节点周期性地从周围节点获取网络状态信息
    每个节点也周期性将自己的路由情况广播周围的节点
    每个节点根据新的网络状态来更新路由选择决定
  3)混合路由选择

    
7.路由表
  IP路由表的字段
  a.Network destination  目标网段
  b.Netmask
  c.Gateway
    间接交付时，要转发的下一个router 的IP地址 
    直接交付时，不需要网关，和interface一致
  d.Interface
    从哪个路由接口转发出去 ---> IP
  e.Metric
    本路由到达目标位置的相对成本.通常为到达目标位置的router数
  决定路径的步骤:
  a.将目标IP地址与Netmask做AND运算     ---> 得到目标网络段
  b.若不能在路由表找到目标网络段       ---> 采用默认路由，将封包交给默认的路由器处理
  c.若有多个路径可以转发，则取掩码长的 ---> 目标网络规模小,路径精确
    再根据Metric选取成本最小的路径

8.IP header
  header中有前20字节为固定部分，后面为可选字段 -----> header长度可变
  1)版本 4bit
    比如IPv4和IPv6   ---> 处理方式不同
  2)header长度 4bit
    可表示15个单位，一个单位4字节 ----> 最大值为60字节
  3)服务类型 8bit
  4)datagram长度 16bit
    最大长度为 65535  ---> 而且不能超过MTU
  5)标识
    IP数据报的计数器
  5.标志位
    标识该数据报是否为fragment
  6)片偏移 12bit
    较长的分组会进行分片，该字段记录某分片在原分组中的相对位置
  7)TTL(Time To Live)
    datagram在网络中的寿命
  8)协议
    指出此datagram携带的数据使用的何种协议，以便目的主机的IP层将数据部分交给对应处理过程
    比如:ICMP,IGMP,TCP,UDP
  9)header的checksum
    置checksum的初值为0,然后对header的每16位求2进制反码，然后累加，结果取反
    方法简单，但不可靠
  10)源IP和目的IP

9.MTU(Maximu Transmit Unit)
  物理链路中一个frame最多能携带的数据量
  由router连接的各个网络的MTU可能不同

10.MTU由硬件决定，而IP datagram大小则由软件决定(在1-65535中选择)
   IP datagram 大小肯定不能超过MTU
   Internet中各个网络含有不同的MTU,范围设为[low,high]
   若以high作为datagram大小的上限，则在MTU较小的网络中不能完成数据封装
   若以low作为datagram大小的上限，则在MTU较大的网络中会造成硬件资源的浪费
   上述方法的缺点:IP datagram一成不变，不能适应不同的网络

   IP协议采用fragmentation来屏蔽不同网络中的MTU
   当前节点在IP层封装上层数据为datagram时，会根据自己所处的网络将其封装为合适的大小
   若datagram过大，则会将其fragment.
   每个fragment包括:IP header+ data 
   此时IP header中标志字段标识其是否为fragment,
   header中的片偏移字段指示当前fragment的data在原来IP data中的偏移

   目的主机准确接收到所有fragment后，对它们进行重组
   中间路由器不会对其重组. --> 可以为每个fragment独立选择路径

11.可变选项
   格式:code(1byte) length(1byte) data(长度可变)
   code表示选项的作用，类型以及是否可以被复制
   data:指针，长度等数据
   常见选项:
-----------------------------------------------------------------------------------------
   a.record route
     通知IP datagram沿途传送的所有router,让他们将自己的IP地址填入IP datagram中的可选部分 
     以此来跟踪datagram的传递路径
   b.timestamp
     通知router写入转发datagram时的时间  ----> 以此来测量途径router之间datagram传输的时间
   c.loose source routing(虚电路)
     指定一个路由器IP 地址列表，datagram发送过程中必须经过其中所有的router
-----------------------------------------------------------------------------------------
   
12.路由选择协议
   Internet的规模非常大，若让router知道所有的网络如何到达，那么会导致路由表非常大.
   router之间交换的路由信息所需要的带宽就可能使得Internet的通信链路饱和
   有些单位不希望外界了解自己内部的网络布局细节，但同时希望自己连接到外界的网络中

13.AS(Automonous System)
   包括 单位内部的一组路由器 
   这些路由器使用 AS内部路由选择协议 和 共同的度量 以确定该分组在AS内的路由选择,
   同时还使用一种 AS之间的路由选择协议 以确定分组在AS之间的路由选择

   IGP(Interior Gateway Protocol):AS内部使用的路由选择协议.比如RIP和OSPF
   EGP(External Gateway Protocol):AS之间使用的路由选择协议.比如EGP
   
   RIP(Routing Information Protocol)
   是一种 分布式的 基于 距离向量的 路由选择协议
   要求网络中的每个路由器 都要维护一个 从它自己到目的网络的最短距离记录 --> 距离通过中间的路由器数来衡量
   初始，每个路由器的路由表只记录可以直接到达的网络，距离为1
   然后开始通过RIP报文与其他路由器交流
   三个要点:
    1)仅和 相邻router 交换信息
    2)交换的信息是当前router知道的全部信息 ---> 路由表.
      并更新自己路由表
      最终AS中的所有路由器都拥有整个AS的全局路由信息 
      每个路由器也就知道了到达目标网络的最短路由距离以及下一跳地址
    3)按照固定的时间间隔交换路由信息
   RIP优缺点:
    优点:实现简单
    缺点:1)因为其能维护的最大距离为15,16表示不可达 ----> 限制了网络规模
         2)当网络出现故障，要经过很久才能将该信息传给所有router ---> 坏消息传的慢，会被好消息覆盖
         比如:
         R1:到网1的距离为1，直接交付
         R2:到网1的距离为2，要经过R1
         网1出现故障,R1到路由表的距离为无穷大(16)，R1要将此信息传给R2
         但R2在收到 R1的更新报文之前，R1先收到了R2的路由更新报文 -> R1先更新路由表:到网1的距离为3，下一跳为R2
         然后将此更新信息发送给R2 --> 因为之前的坏消息会传的很慢，R2可能会先收到R1的更新信息，然后更新路由表:到网1的距离为4，下一跳为R1 
         以直到双方到网1的距离记录为16时，才知道网1不可达
   
   OSPF(Open Shortest Path First)
   是分布式的链路状态协议
   三个要点:
    1)router向AS中的所有router发送信息，采用洪泛法
    2)发送的信息是 与本router所有相邻的router的链路状态信息:指明本路由器和那些路由器相邻，以及该链路的metric
    3)只有当链路状态发生变化时，router采用洪泛法向所有router发送此信息
   采用洪泛法，使得链路状态数据库能够很快的建立
---最终所有路由器都能建立一个链路状态数据库 ----> 全网的拓扑结构
   通过最短路径算法Dijkstra选择最短路径
   
   BGP:用于AS之间的路由选择协议
   对于AS之间的路由选择，由于AS之间路由的代价不好衡量，所以也就很难得到最佳路由，只能尽可能地选择优良路径
   每个AS都有边界router，其会于其他AS的边界router建立TCP连接，然后交换路由信息(交换可达信息).
   边界router从收到的路由信息中找出 到达各个AS的较好路由

14.ICMP(Internet Control Message Protocol)
   用于在IP层传递控制信息
   控制信息:网络是否连通，主机是否可达，路由是否可用等网络本身的信息

   为什么需要ICMP?
   因为IP协议本身缺少差错报告,主机查询机制
   
   ICMP报文封装在IP datagram的data中
   ICMP报文也包括header+data
   header:4字节
    1)类型(8 bit)
      a.差错报告报文类型:报告路由器或者主机在处理IP数据包时可能遇到的问题
        特点:
        1.差错报文都是由路由器发给源主机的
          因为源主机最需要知道数据是否到达目标主机,而且IP数据报中含有源主机的IP地址
          比如源主机发送IP报文到router
          router发现有报文差错，于是生成ICMP报文，嵌入到IP报文(主要是IP header)中，返回给源主机
        2.ICMP只进行差错报告，不进行处理
        3.由于ICMP报文嵌入在IP dagagram中.所以同其他IP datagram一样，没有可靠性保障
        4.有时，为了防止网络中产生大量的ICMP差错报文而影响网路的正常工作
          即使发生差错，也不会产生ICMP差错报文
          比如:目的地址是广播地址或多播地址
               不是IP分片的第一片

      b.查询报文类型
        成对出现，用于从某个路由器或者对方主机获取特定的信息
        ping:在网络层访问目标主机是否运行
        比如: 17+18:获取地址掩码

    2)代码(8 bit)
    3)校验和(16 bit)
   
   常见的ICMP差错报告报文:
    1)终点不可达
      当router检测到IP datagram无法传到目的地时，会向源主机发送目的不可达报文
    2)源点抑制
      IP协议缺乏流量控制和拥塞控制
      当router的输入队列已满时，在丢弃datagram的同时，会向源主机发送抑制报文
      源主机收到报文后会降低发送数据报的速率
    3)超时报文
      a.router将datagram的TTL减至0，然后丢弃该datagram，并向源主机发送超时报文
      b.在规定的时间内没有收到所有的fragments,它就丢弃所有的fragments
    4)参数问题
      IP header中的标志出现差错或二义性，或缺少必须的选项
    5)改变路由
      routerA收到IP datagram，发现该datagram并不应该经过它

15.多播可以明显减少网络中资源的消耗
   比如:向90个主机发送报文
        若采用单播，则需要发送90次，中间路由器会转发多次 ---> 消耗大量资源
        若采用多播，则只需要播送一次，中间路由器只需要转发一次
   多播使用D类地址 
   IGMP(Internet Group Management Protocol)
   IGMP并不知道IP多播组的成员情况。
   其主要负责让 连接在本地局域网上的多播路由器 知道 本局域网是否有主机 参加或退出了某个多播组

   IGMP的两个阶段：
   1)当某个主机要加入多播组时，应该通过多播地址向多播组发送IGMP报文，声明自己要成为该组的成员
     本地的多播路由器收到IGMP报文后，将信息转发给其他多播路由器
   2)多播组的成员是动态变化的
     因此多播路由器需要周期性的探询本地局域网的主机，查看其是否还是多播组的成员
     若一直没有主机回应，那么该多播路由器就不再将成员关系转发给其他多播路由器
   
   组播路由器构造为一颗组播路由树，组播数据包从根节点转发到所有的叶子节点
     
16.Classes Inter-Domain Routing
   取消了A，B，C以及子网划分的概念
   IP地址为两级编址：网络号+主机号

   假设大学U含有4个网络，分别为:
   net_A,net_B,net_C,net_D
   4个网络含有各自的对外路由器:R_A,R_B,R_C,R_D
   整个大学含有对外路由器R
   按照传统的路由模式:
   外界若要找到大学,则每个路由器的路由表都要4个项目来记录大学中的4个网络号,R则作为中转站
   设外界路由器为X
   4个项目分别为:
   net_A  R.mask  Gateway->R   X.IP
   net_B  R.mask  Gateway->R   X.IP
   net_C  R.mask  Gateway->R   X.IP
   net_D  R.mask  Gateway->R   X.IP
   R中的路由表
   net_A  R_A.mask  Gateway->R_A   R.IP
   net_B  R_B.mask  Gateway->R_B   R.IP
   net_C  R_C.mask  Gateway->R_C   R.IP
   net_D  R_D.mask  Gateway->R_D   R.IP

   现在将net_A,net_B,net_C,net_D4个网络的网络号进行聚合(子网汇聚)，聚合为net ----> 对应着路由器R
   此时外界只需要记录net即可
   即:
   net    R.mask    Gateway->R   X.IP
   R中的路由表不变
   以此减少路由表的项目

   外界发送一个数据包到该大学的网络D
   1)IP地址先于R.mask做AND运算，得到net --> 匹配
   2)将数据包发给R
   3)再用R中的路由表进行查询 ---> 逐条查询 ---> 最后匹配net_D

   可能查表时会得到不止一个匹配结果 --> 取最长的匹配结果 --> 越长表明网络范围越小，越容易找到目标主机


网络层:主机之间的数据传递
传输层:进程之间的数据传递
应用层:进程对数据的处理

三元组标识主机的某个进程:IP地址+协议(比如TCP)+PORT


17.TCP
   面向连接，可靠的传输层协议 ----> 建立在不可靠的IP层上
   保证可靠性的技术:见上文
   
   差错控制:采用校验，确认，以及超时重传
   发送方对数据生成校验码，存于TCP header中
   接受方收到TCP segment后，会对数据重新生成校验码，并与TCP header中的校验码进行比对 
   若一致，则接收方发送确认报文
   若不一致，则接受方什么也不干，发送方超时重传数据。
   又或者发送连续3个ACK，发送方收到以后，立刻重传数据 ----> 快重传

   延迟确认机制
   若收到的报文段序号=recv_base,并且所有在recv_base之前的报文段的确认都已经发送，则只更新recv_base，但延迟该报文段的ACK的发送
   这个延迟的ACK可能会在稍后 接收端有数据要发送给发送端时(比如累积的ACK)，将该ACK pigback回去
   若收到的报文段的序号=recv_base,并且有延迟的ACK待发送,则更新recv_base,并发送累积的ACK
   若收到的报文段的序号>recv_base(乱序),则重传已经确认过的 最后一个按序到达的报文段的ACK，比如ACK = i+1 
   发送端收到以后，知道第i号数据已到达，开始传输第i+1号数据 --> 重新有序


////////////////////////////////////////////////////////////////////////////////
   RTO:Retransmission Timeout 
   影响重传机制效率的关键因素
   RTO过大:发送方会经过较长时间等待才能发现报文段的丢失 --> 降低数据传输的吞吐量
   RTO过小:发送方可以很快地检测出报文段的丢失，但也可能将一些延迟大的报文段误认为是丢失 --> 造成不必要的重传 --> 浪费网络资源
   RTT(Round Trip Time)
   TCP segment在端点间的传输时间
   RTT动态变化
   TCP会测量出当前RTT的一个估计值，并以此RTT为基准设置当前的RTO
////////////////////////////////////////////////////////////////////////////////

   
   ---
   TCP超时重传TCP segment
   当原始segment和超时segment到达接收方时，由于其内容都是一样的，那么发送方应该针对哪个segment发出确认信息呢？

   TCP中的重要定时器
   1)超时重传定时器
     发送方发送数据时设置，若数据确认超时，则重发数据
     若数据按时到达，则关闭定时器
   2)连接建立定时器
     当服务端发出建立连接的的SYN发出后，就开启该定时器
   3)ACK延时定时器
     ACK可以延迟通过pigback发送，但也要有时间范围

 ///////////////////////
   4)零窗口探测定时器
     发送方在收到一个窗口大小为0的数据时，就启动该定时器
     若在该时间段内，发送方没有收到对方 修改窗口大小的数据报,则 发送方就发一个探测报文
     接受方对其响应，若窗口大小还是为0，则定时器清0，重复以上步骤   -----> 在通告窗口为0是，发送端不能发送其他数据
 ///////////////////////

   5)保活定时器
     当一个连接长时间闲置，服务端就会间隔地发送几个探测报文
     若都没有得到响应，则发送RST报文终止连接
   6)闲置定时器
     TCP断开连接后，有些数据还在网络中
     若稍后开启新连接且与旧连接有相同的设置 --> 这些历史数据可能就会被新连接收到
     设置闲置定时器，以防止新连接立即重新使用而收到历史数据

19.UDP
   无连接的，不可靠的传输层协议
   设计UDP是为了希望 以最小的开销 来达到在网络环境中 进程的通信
   适用于发送的报文较短，对报文的可靠性要求不高

   UDP含有伪头部:
   包括:源IP,目标IP,协议号,UDP长度,pat(00000000)
   
   其目的是为了让数据包接受者确定 接收的数据包 是来自正确的源

20.IP地址用于网络层，域名用于应用层，二者都应是全网唯一的
   域名的一般格式
   www.hhu.edu.cn 
   主机名.三级域名.二级域名.顶级域名

   域名解析由分布式环境中众多域名服务器共同完成
   大多数 具有Internet连接 的主机都有 一个域名服务器 --> 其包含连向其他域名服务器的信息
   这些服务器形成了一个 大的协同工作的域名数据库
   DNS服务器的层次与域名的层次是相适应的
   每个域名服务器都只对域名体系中的一部分进行管辖
   根服务器是顶层域的管辖者 ----> 知道所有的顶级域名服务器的域名和IP地址
   若不能在本地完成域名服务器的解析，则要首先求助于 根域名服务器
   域名解析流程:
    1)在本地域名服务器中进行解析 ---> 服务器会使用缓存，增加查询速度
    2)若没有找到，则本地域名服务器以DNS客户的身份向根域名服务器发出UDP报文
   迭代式查询方式:
    根域名服务器并不直接将IP地址返回给本地域名服务器
    而是 将域名中的顶级域名服务器 的IP地址发送回来
    本地域名服务器再去查询顶级域名服务器，得到权限服务器的IP地址，再去查询权限服务器，最终得到IP地址

21.网络环境下在不同主机之间传输文件的复杂性
   1)文件的目录结构和文件命名的规定不同
   2)访问控制方法不同
   3)计算机存储数据的格式不同

   FTP使用TCP
   其主要功能是 减少或消除在不同操作系统下处理文件的不兼容型
   采用CS模式
   一个FTP Server process可服务多个client process
   client process会与server process建立两个连接
   1)控制连接
   2)数据连接
   二者使用不同的port 21和20

22.www (world wide web)
   信息资源以web网页的形式存储在web服务器中
   用户通过browser程序浏览web网页内容
   通过web网页中的链接，用户可以方便地访问位于其他web服务器中的web网页

   用户通过browser向web服务器发出请求，web服务器返回用户所需的万维网文档

   万维网的核心
   1)统一使用HTML语言描述Web页面
   2)使用URL来简要的标识资源所在的位置和访问方法
   3)使用HTTP协议进行信息传输

   URL:相当于一个文件名在网络范围的扩充
   URL格式:
   访问方式://主机域名:管理资源的进程端口 /资源路径
   

   www是分布式hypermedia(超媒体,含有音频流)系统，是hypertext(超文本)系统的扩充
   通过HTML描述超文本和超媒体

