1 创建子进程 -- fork
  可用于将任务进行分解时
  
  pid_t fork(void)
  a.内存布局方面:
    子进程和父进程共享程序文本
    copy父进程的数据段，栈，堆给子进程  ---> 二者是独立的 ---> 运行自己的程序
  
  b.返回结果
    将存在两个进程 ---> 父与子  ---> 系统随机选择一个进行调用
    从父进程返回  ---> 子进程ID
    从子进程返回  --->  0
    调用失败      ---> -1       ---> 进程数量可能到达上限

  所以fork用法
  pid_t childPid;
  switch (childPid = fork()){
    case -1:
     //handler error 
    case 0:
     //perform actions specific to child
    default :
     //perform actions sepcific to parent
  }

2 父，子进程的文件共享
  子进程会获得父进程所有fd的副本 ---> 就像是用dup()创建
  父子的fd指向同一 oepn file handle---> 共享底层打开文件句柄 ---> 其中一个修改，另外一个也能看见
  若不需要这种共享，则应:
  1.父子使用不同的fd
  2.各自close不使用的fd

3 fork时内存深入分析
  a.对于代码段，只读属性，父与子共享
    子进程的页表项指向与 父进程相同的物理内存页
  b.对于数据段，堆段，栈段
    起始:内核将 子进程中这些段的页表项 指向与父进程相同的内存页
         但页表项被标记为只读
         若子进程需要修改数据 --> 内核捕获异常 --> 为要修改的页面创建副本，并调整页表项 --> Copy On Write

4 控制进程的内存需求
  创建子进程，将任务丢给子进程去做 --> 自身的内存量不会变化
  譬如:
   if(childPid == 0)
     exit(func(args))   ----> 将任务丢给了子进程，子进程调用func,然后exit退出
   wait(&status)        ----> 父进程拿取结果

5 基于BSD的vfork p433

6 fork之后的race condition 
  调用fork之后，无法确定CPU调用父,子进程的哪一个
  若正确的结果与 父，子进程调用顺序有关，则可能发生race condition 
  不应对 fork之后 执行父，子进程的特定顺序 做出任何假设
  若要保证某一特定顺序，则应使用 同步技术
  
  譬如:通过信号来规避race condition
  例子:父进程等待子进程完成某些动作,子进程完成后，向父进程发送信号

