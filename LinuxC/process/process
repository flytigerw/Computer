1可执行文件包含的内容
 1)二进制格式标识:内核识别此标识后就知道其是可执行的二进制文件
 2)程序入口地址
 3)数据:变量的初始值以及使用的literal constant
 4)符号表和重定位表:记录程序中函数和变量的名称和位置。还包括调试和运行时的符号解析(动态链接)
 5)动态库和符号链接信息
 6)others

2 进程由 user-spcae memory 和一些系列 内核数据结构 组成
  user-space memory包含程序代码以及数据
  内核数据结构提供给内核使用。包括:IDs,虚拟内存表，open file descriptor表，signals，working directory.......

3 系统中的每个进程都有唯一PID进行标识
  0-300左右PID的进程为系统进程和守护进程
  获取pid:
  pid_t getpid(void)
  pid_t getppid(void)
  若父进程终止,则子进程会变成孤儿------->子进程会被init进程"收养" ------>子进程getppid得到1
  
  也可通过 /proc/PID/status文件 查看到PPID

4 进程的内存布局
  1)文本段: 程序代码，二进制格式，只读属性.
            多个进程可共享相同的程序代码 ---> 程序代码映射到所有这些进程的虚拟地址空间中,故具有共享属性
  2)初始化数据段:显示初始化的全局变量和静态变量
  3)未初始化数据段:未进行显示初始化的全局变量和静态变量。
    2)和3)分开存放的原因:程序在磁盘上存储时没有必要为 未经初始化的变量 分配存储空间
                         只需要记录其位置以及所需大小
                         在运行时，由程序加载器来分配空间
  4)栈:由stack frame组成。系统每个函数分配一个stack frame。用于存储局部变量，实参和返回值
  5)堆:动态进行内存分配的区域

  etext:程序文本段结尾
  edata:程序初始化数据段结尾
  end  :程序未初始化数据段结尾
  可以在程序中显示使用: 先extern声明 extern char etext; 再&etext获取具体地址

5 有时库函数返回的指针(返回信息)指向静态分配的内存--->初始化数据段 或者 未初始化数据段
  这些内存独立于函数调用 ----> 后续对同一函数的调用可能会将其覆盖 
  故:使用静态内存的函数应该是不可重入的

6 ABI(application binary interface)
  规定了二进制可执行文件在运行时应如何与某些服务(比如内核提供的服务)交换信息
  特别规定使用哪些register和栈地址来交换信息
  一旦针对某个特定ABI进行来编译，其二进制可执行文件应能在ABI相同的任何系统上运行

7 栈
  栈驻留在虚拟内存高地址处,向下增长。
  每个函数占用的栈空间--->stack frame
  user stack frame包含的信息
  1)函数实参和局部变量:调用函数时自动创建----->自动变量。
    函数返回时--->退栈--->销毁stack frame--->销毁自动变量
  2)函数调用的链接信息:比如返回地址(调用者下一条指令地址-->保存在IP中)
  
  内核栈:进程保留在内核内存中的内存区域--->受到保护
         供系统调用过程中,内核函数使用
         
8 命令行参数: argc与argv
  argv: char* argv[]
  最后一项为NULL
  每一项为以\0结尾的字符串

  argc和argv为main函数的自动变量
  让其他函数访问的方法
  1)保证可移植性
    a.函数传参
    b.设置指向argv的全局变量
  2)不保证可移植性
    a.系统通过文件/proc/PID/cmdline进行访问
      程序通过文件/proc/self/cmdline
    b.通过全局变量
      program_invocation_name --->提供调用该程序的完整路径名
      program_invocation_short_name->提供了不包含目录的程序名称
      需要定义_GNU_SOURCE并从<errno.h>

9 environment list
  为字符串数组
  每个字符串形式: name=value

  创建进程---->子进程会继承会进程会继承父进程的 environment list 
  原始的进程间通信方式--->一次性的，单向的

  shell在自身环境中设置环境变量---->由shell创建的进程也就会继承这些环境变量

  在shell中,通过printenv查看当前的environment list
  /proc/PID/environ保存着PID进程的environment list
  
  在程序中关于environment list的操作:
   1)通过 char** environ访问environment list
     environ类似argv
     遍历方式:
      char** ep;
     for(ep=environ;*ep!=NULL;ep++)
      puts(*ep)

   2)在main中可声明char* envp[]来访问environment list
     int main(int argc, char* argv[], char* envp[])
     但被局限在了main函数中.不推荐

   3)检索单个name=list
     char* getenv(const char* name)
   
   4)修改环境:修改对该进程后续创建的所有子进程都可见
     a.int putenv(char* ps)
        ps 指向 "name=value" 形式的字符串
        会将ps copy 到environ中的某变量----->指向该字符串
        若该字符串修改---->环境也就修改----->it's not good
     
     b.int setenv(const char*name,const char* value, int override)
        会拼接形成"name=value"的字符串.在environ指向的字符串数组增加一块内存,将字符串拷贝过来---->与源字符串独立
        该内存为堆内存
        override代表是否要覆盖原有环境变量

     c.int unsetenv(const char* name)
        移除某环境变量
     
     d.int clearenv(void)
        清除环境----> environ=NULL
       setenv和clearenv的结合使用可能会造成内存泄露--->setnv分配了堆内存但clearnv并没有对其释放
       但通常clearnv用于程序启动时移除继承来自父进程环境的条目

10 非局部跳转
   从当前函数跳转到另一函数
   考虑场景:在深度嵌套的函数调用中发生了错误
            需要放弃当前任务，从函数调用中返回到较高层级的函数继续执行
   如何做到这一点?
   1.逐层返回，每一层返回一个状态值，对状态值进行判断和处理
   2.直接跳到某较高层级的函数
   API:
   int setjmp(jmp_buf env) + void longjmp(jmp_buf env,int val)
   setjmp为longjmp确立了跳转目标
   第一次调用setjmp  ---->返回0
   longjmp调到setjmp处，再调用一次setjmp --->返回val值
   若val为0,longjmp会将其设为1。
   以此就能通过setjmp的返回值来确定setjmp是第几次调用

   参数:env
   setjmp和longjmp必须一致------>env为全局变量
   存储当前进程的各种信息以及  ip和sp

   setjmp保存了ip和sp
   longjmp就可以读取到------>就知道准确的跳转位置，并且将setjmp和longjmp之间的函数栈帧剥离--->重置栈顶指针

setjmp使用语境限制
1)构成选择，迭代语句中的控制部分。比如 if,switch,while(setjmp(env)==0)
2)作为独立的函数调用,没有嵌入到更大的表达式中
限制原因:setjmp()无法保证拥有足够信息来保存 所有寄存器值和  封闭表达式中用到的临时栈位置
因此 仅允许足够简单且无需临时存储的表达式中 调用setjmp()  比如简单表达式 == >=  !

longjmp不能跳转到已经返回的函数---->函数已经返回,栈帧已经被退回,之前setjmp保存sp还有用吗？--->当然无用
比如:
1调用x(),x()调用setjmp--->保存当前sp
2从x()返回---->x栈帧退回
3调用y(),y()调用longjmp --->会尝试消去sp与当前函数栈之间的栈帧---->但sp已经是无效值

11 编译器优化
  重组程序的指令顺序
  但优化不一定就是好事
  将变量声明为 volatile 可避免被优化
