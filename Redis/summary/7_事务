

1.事务提供 原子性地多个命令 的机制
  Redis中的事务使用
  MULTI命令:  事务开始
  多条命令   
  EXEC命令:   事务提交

  MULTI命令
  其会将客户端从非事务状态更新为事务状态 ---> 更新redisClient的flags:添加REDIS_MULTI

  当客户端处于非事务状态时，客户端发送的每条命令都会立刻被服务器执行
  当客户端处于事务状态时，服务端则会根据客户端发送的不同的命令执行不同的操作
  a.EXEC,DISCARD,WATCH,MULTI
    立刻执行
  b.其他命令则会被放入命令队列中
    
  每个Redis客户端都有自己的事务状态 ---> redisClient的multiState mstate
  struct multiState{
      multiCmd* commands;   //FIFO性质的命令队列.数组实现
      int count;
  }
  struct multiCmd{
      struct redisCommand* cmd;   //命令指针
      robj** argv;                //命令参数
      int argc;
  }

  当服务端收到客户端的EXEC命令时，服务端会依次执行命令队列中所有命令

2.WATCH命令
  其为乐观锁
  在EXEC命令之前，调用该命令监视某些数据库键
  在执行EXEC命令时，若被监视的键中有一个被修改，则服务器拒绝继续执行该事务，向客户端返回事务执行失败的空回复
  用于保证事务的安全性:在事务执行时，数据必须要正确 ---> 没有被中途修改
  
  WATCH命令实现:
  所有Redis数据都有一个watched key字典.记录了所有监视该数据库中某些键的客户端
  struct redisDb{
    dict* watched_keys;   --->   <key_name,redisClient*> ---> 多个客户端可能同时监视同一个键
  }

  所有会对数据库进行修改的命令(SET,LPUSH,SADD...)在执行完修改操作以后都会调用touchWatchKey()对watched_key字典进行检查
  检查是否有客户端正在监视 刚刚被命令修改过的数据库键
  若有，则会设置该客户端对应redisClient中flag:添加REDIS_DIRTY_CAS --> 表明该客户端的事务安全性已经被破坏 ---> EXEC命令会检测到

  
  
3.Redis中的ACID
  1)Atomicity
    Reids不支持回滚  ---> 回滚功能比较复杂，与Redis追求简单高效的主旨不符
    即使某个命令执行出错，后面的命令也会执行

  2)Consistency  
    在执行事务前，数据库的状态是一致的
    在执行事务之后，不管成功与否，数据库的状态也应还是一致的
    一致:数据符合数据库本身的定义和要求，没有非法数据
    Redis通过谨慎的错误检查保证事务前后，数据库的一致性
    a.检查入队命令
      保证事务不会执行非法格式的命令
    b.执行错误检查
      命令格式可能合法，但命令操作可能违反语义
      比如:键msg为字符串键
           用RPUSH命令操作此键 ---> 违反语义 ---> 不执行
  3)Isolation 
    即使数据库中有多个并发的事务，各个事务之间也不会相互影响
    并发执行的事务的结果和串行执行的事务产生的结果要一致
    Redis采用单线程执行事务，并且保证事务执行期间不会被打断 ----> 相当于串行执行

  4)Durability
    当事务执行完毕后，事务执行结果应该已经被保存到外存中
    即使服务器在事务执行完毕后宕机，事务的执行结果也不会丢失
    Redis没有为事务提供额外的持久化功能. ---> 依靠Redis本身所使用的持久化模式:AOF,RDB

