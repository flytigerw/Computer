1.Dangling reference problem
  int* p = &n;
  delete p;    --->  p指向的内存块已经被释放，程序不能再访问，否则可能导致程序崩溃 ---> 但p依旧保存着这块内存的地址,应该将其赋空后才继续使用
  p = nullptr

2.int a[5]
  a是一个指针，指向保存5个整数的内存块的起始地址。地址是固定的 ---> a是常量
  求和:
  1:数组下标
    for(sum=a[0],i=1;i<5;i++)
       sum += a[i];
  2:a[i]=*(a+i)
  3.用指针遍历
    for(sum=a[0],p=a+1;p<a+5;p++)
      sum +=*p;
  指针运算依赖于它指向的实体类型
  T* p;
  p++; ---> p+sizeof(T)

3.字符串操作函数都是要求字符串以'\0'结尾
  char* s1 = hello;
  char s2[10];
  strcpy(s2,s1);

4.引用可作为函数返回类型
  成员函数不应该返回自己数据成员的引用 ----> 破坏了数据的封装性 ---> 数据成员地址暴露在外面

  class C{
    public:
      int& getData() const {return a;}      //Wrong
    private:
      int a;
  };

5.静态绑定:函数调用情况在编译阶段就确定
  动态绑定:函数调用情况在运行阶段才确定
    通过将成员函数声明为virtual来实现
    对虚函数调用不依赖于当前指针的声明类型，而是其指向类型
