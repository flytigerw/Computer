<HTML>
<HEAD>
<LINK rel="stylesheet" href="../exer.css">
</HEAD>
<BODY>
<H1>
Data Structures, Algorithms, & Applications in C++<BR>
Shaker Sort<BR>
Copyright 1999  Sartaj Sahni<br>
<BR>
</H1>

In Chapter 2 we have considered most of the simple sorting methods.
Shaker sort is a variant of the bubble sort method.  In shaker sort,
<code class=var>n</code> elements are sorted in
<code class=var>n/2</code> phases.  Each phase of shaker sort consists
of a left to right bubbling pass followed by a right to left bubbling pass.
In a bubbling pass
pairs of adjacent elements are compared and swapped if they are out of
order.
<br><br>
Suppose we are to sort the elements <code class=var>[6,5,2,8,3,1]</code>.
The number of phases is <code class=var>3</code>.  In the left to right pass of the first phase,
the pair <code class=var>(6,5)</code> is compared and swapped to get the array <code class=var>[5,6,2,8,3,1]</code>.
Next the pair <code class=var>(6,2)</code> is compared and swapped to get <code class=var>[5,2,6,8,3,1]</code>.
The next compare <code class=var>(6,8)</code> causes no swap.  When <code class=var>8</code> and <code class=var>3</code> are compared,
a swap is done to get <code class=var>[5,2,6,3,8,1]</code>.  The final compare
of this pass is <code class=var>(8,1)</code>.  Following the swap we get <code class=var>[5,2,6,3,1,8]</code>.
Now the right to left pass begins.  The pair <code class=var>(3,1)</code> is compared first,
a swap is done, and we get the array <code class=var>[5,2,6,1,3,8]</code>.  Next
the pair <code class=var>(6,1)</code> is compared and we get <code class=var>[5,2,1,6,3,8]</code>.
At the end of the right to left pass we have <code class=var>[1,5,2,6,3,8]</code>.
Phase <code class=var>2</code> works on the segment <code class=var>[5,2,6,3]</code>.  After the left to right pass,
we have <code class=var>[2,5,3,6]</code>; and after the right to left pass, we have
<code class=var>[2,3,5,6]</code>.  The third phase works on the segment <code class=var>[3,5]</code>.
<br><br>
Suppose we start with an array <code class=code>a[0:n-1]</code>
of elements to be sorted.
After the left to right bubbling pass of phase <code class=var>1</code>, the largest element
is in the rightmost position.  So the right to left pass
needs to be concerned only with elements in positions <code class=var>0</code> through <code class=code>n-2</code>
of the array.  Following the right to left pass, the smallest element
is in position <code class=var>0</code> of the array.  Consequently, the next phase
need be concerned only with the elements in
positions <code class=var>1</code> through <code class=code>n-2</code>.
<br><br>
In general, the left to right pass of phase <code class=code>p</code> of shaker
sort needs to be concerned only with elements in positions
<code class=code>p-1</code> through
<code class=code>n-p</code>, and the right to left pass of this phase needs
to be concerned only with elements in positions
<code class=code>n-p-1</code> through
<code class=code>p</code>.
<br><br>
The code given below
implements the shaker sort method.  Note that when <code class=code>n</code>
is odd, the right to left pass of the last phase accomplishes
nothing.

<HR class = coderule>
<pre class = code>
public class ShakerSort
{
   template <class T>
   void shakerSort(T a[], int n)
   {// Sort a[0:n-1] using shaker sort.
      for (int p = 1; p <= a.length / 2; p++)
      {// phase p of shaker sort
         // first do left to right bubbling pass
         for (int i = p - 1; i &lt; n - p; i++)
            if (a[i] > a[i+1])
               swap(a[i], a[i + 1]);
        
         // now do right to left bubbling pass
         for (int i = n - p - 1; i >= p; i--)
            if (a[i] < a[i-1])
               swap(a[i], a[i - 1]);
      }
   }
}
<hr class=coderule>
</pre>

<br><br>
To analyze the complexity of <code class=code>shakerSort</code>, we can count
the number of comparisons between pairs of elements,
do a step-count analaysis, or proceed directly to do
an asymptotic analysis.  The number of element compares
in the first phase is <code class=code>(n-1) + (n-2)</code>, in the second phase it
is <code class=code>(n-3) + (n-4)</code>, and so on.  Summing over all phases,
we obtain <code class=code>(sum from i=1 to n-1)i</code> =
<code class=code>n(n-1)/2</code> as the number of comparisons.
<br><br>
To do a direct asymptotic analysis, we observe that
phase <code class=code>p</code> takes
<code class=code>Theta(n-p)</code> time.  So the time for all phases is
<code class=code>(sum from p=1 to n/2)(n-p)</code> =
<code class=code>(sum from q=n/2 to n-1)q</code> =
<code class=code>Theta(n<sup>2</sup>)</code>.
The complexity of shaker sort is <code class=code>Theta(n<sup>2</sup>)</code>.
See the solution to Exercise 19.46 to understand why
sort methods such as bubble, insert, selction, and shaker must
take <code class=code>O(n<sup>2</sup>)</code> time.

</FONT>
</BODY>
</HTML>
