<HTML>
<HEAD>
<LINK rel="stylesheet" href="../exer.css">
</HEAD>
<BODY>
<H1>Data Structures & Algorithms</H1>

<H2>Exam 1</H2>
<H2>Sample 1, 50 Minutes</H2>
<BR>
</H1>
<ol>
<li>
An abbreviated version of the class <code class=var>LinearList</code>
of the text is given below.
<pre class=code>
<hr class=coderule>
template&lt;class T&gt;
class LinearList {
   public:
      LinearList(int MaxListSize = 10); // constructor
      ~LinearList() {delete [] element;} // destructor
      bool Find(int k, T&amp; x) const;
         // return the k'th element of list in x
      LinearList&lt;T&gt;&amp; RightShift(int k);
         // shift elements right by k
         // zero fill at left end
   private:
      int length;
      int MaxSize;
      T *element; // dynamic 1D array
};

template&lt;class T&gt;
LinearList&lt;T&gt;::LinearList(int MaxListSize)
{// Constructor for formula-based linear list.
   MaxSize = MaxListSize;
   element = new T[MaxSize];
   length = 0;
}

template&lt;class T&gt;
bool LinearList&lt;T&gt;::Find(int k, T&amp; x) const
{// Set x to the k'th element of the list.
 // Return false if no k'th; true otherwise.
   if (k &lt; 1 || k &gt; length) return false; // no k'th
   x = element[k - 1];
   return true;
}
<hr class=coderule>
</pre>
The new member <code class=var>RightShift</code> shifts the
elements of the linear list right by <code class=var>k</code>
positions and fills the empty positions at the left end
with zeroes.  For example, if the list <code class=var>element</code>[0:5]</code>
= [1, 2, 3, 4, 5, 6], whose length is 6, is shifted right by 3, the result is
[0, 0, 0, 1, 2, 3, 4, 5, 6], whose length is 9.  The
<code class=var>NoMem</code> exception is thrown if the array
<code class=var>element</code> doesn't have enough space for
the shifted list and the
<code class=var>BadInput</code> exception is thrown if <code class=var>k</code>
&lt; 0.
<dl compact>
<dt>(a)
<dd>
[8] Write C++ code for the <code class=var>RightShift</code>
member function.
<dt>(b)
[2] What is time complexity of your code as a function
of the list length?
</dl>
<br><br><br>
<li>
A condensed version of the class <code class=var>Chain</code>
is given below.
<pre class=code>
<hr class=coderule>
template &lt;class T&gt;
class ChainNode {
   private:
      T data;
      ChainNode&lt;T&gt; *link;
};

template&lt;class T&gt;
class Chain {
   friend ChainIterator&lt;T&gt;;
   public:
      Chain() {first = 0;}
      ~Chain();
      bool IsSorted() const; 
   private:
      ChainNode&lt;T&gt; *first;  // pointer to first node
};

template&lt;class T&gt;
Chain&lt;T&gt;::~Chain()
{// Chain destructor. Delete all nodes in chain.
   ChainNode&lt;T&gt; *next;  // next node
   while (first) {
      next = first-&gt;link;
      delete first;
      first = next;
      }
}
<hr class=coderule>
</pre>
The new member <code class=var>IsSorted</code> determines whether
the chain elements are in ascending (more accurately nondecreasing)
order of their <code class=var>data</code> values.
The function returns <code class=var>true</code>
if the list is sorted and <code class=var>false</code>
if it is not.
<dl compact>
<dt>(a)
<dd>
[8] Write C++ code for the <code class=var>IsSorted</code>
member function.
<dt>(b)
[2] What is time complexity of your code as a function
of the list length?
</dl>

<br><br><br>
<br><br><br>
<br><br><br>
<br><br><br>
<br><br><br>
<br><br><br>
<br><br><br>
<li>
In an <em class=var>n</em> x <em class=var>n</em> <strong>N-matrix</strong>,
all terms other than those
in column 1, column <em class=var>n</em>, and the main diagonal
are zero.  An N-matrix has at most
3<em class=var>n</em>-2 nonzero terms.
An N-matrix can be compactly stored in a one-dimensional array
by first storing column 1, then column <em class=var>n</em>,
and then the remaining
elements of the main diagonal.
<br>
<pre class=figure>
                              x             x 
                              x x           x
                              x   x   zero  x
                              x     x       x
                              x       x     x
                              x  zero   x   x
                              x           x x
                              x             x
<br>
                         x denotes a possible nonzero
                         all other terms are zero
</pre>
</p>
<br>
<dl compact>
<dt> (a)
<dd>
[2] Give a sample 4 x 4 N-matrix and its compact representation.
<dt> (b)
<dd>
[8] Suppose that we are defining a class <clode class=var>NMatrix</code>
that represents an <em class=var>n</em> x <em class=var>n</em>
N-matrix in a one-dimensional array <code class=var>t</em> as above.
The class specification is as follows:
<pre class=code>
<hr class=coderule>
template&lt;class T&gt;
class NMatrix {
   public:
      NMatrix(int size = 10)
         {n = size; t = new T [3*n-2];}
      ~NMatrix() {delete [] t;}
      NMatrix&lt;T&gt;&amp; Store(const T&amp; x, int i, int j);
      T Retrieve(int i, int j);
   private:
      int n;    // dimension
      T *t;     // 1D array
};
<hr class=coderule>
</pre>
Write C++ code for the member function <code class=var>Store</code> which
stores <code class=var>x</code> as the <code class=var>(i,j)</code>
element
of the N-matrix, 1 <= <code class=var>i</code> <= <code class=var>n</code>
and
1 <= <code class=var>j</code> <= <code class=var>n</code>.
The element is to be stored in the proper position of the one-dimensional
array <code class=var>t</code>.

</dl>
</ol>


<center>
<A href="http:s97.htm">Solutions</A>

</html>
