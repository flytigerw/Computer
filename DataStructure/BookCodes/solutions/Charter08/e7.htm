

<HTML>
<HEAD>
<LINK rel="stylesheet" href="../exer.css">
</HEAD>
<BODY>
<H1>
Data Structures, Algorithms, & Applications in C++<BR>
Chapter 8, Exercise 7<BR>
<BR>
</H1>
<dl compact>
<dt> (a)
<dd>
The extensions are
<br>
<dl compact>
<!--
<dt> <em class=var>size</em><font class=var>()</font>:
<dd>
Return the number of elements in the stack;
--!>

<dt> <em class=var>input</em><font class=var>( )</font>:
<dd>
Input a stack from bottom to top;

<dt><em class=var>toString</em><font class=var>( )</font>:
<dd>
Return the stack elements, as a string, from bottom to top;

<dt><em class=var>split(a, b)</em></font>:
<dd>
Split a stack into the stacks <em class=var>a</em> and <em class=var>b</em>.
Stack <em class=var>a</em> contains the bottom-half elements, and
stack <em class=var>b</em> contains the remaining elements.

<dt><em class=var>combine(a, b)</em>:
<dd>
Combine the stacks <em class=var>a</em> and <em class=var>b</em> into
a single stack.
The elements in the combined stack are the result of placing  
stack <em class=var>b</em> on top of
stack <em class=var>a</em>.


</dl>
<br>
<!--
<dt> (b)
<dd>
The interface <ExtendedStack> is given below.
<HR class = coderule>
<PRE class = code>
public interface ExtendedStack extends Stack
{
   public void input(Method inputMethod, MyInputStream inStream);
   public String toString();
   public void split(ExtendedStack a, ExtendedStack b);
   public void combine(ExtendedStack a, ExtendedStack b);
}
</pre>
<HR class=coderule><BR><br>
<br>

<dt> (c)
<dd>
In developing the code for the class <code class=code>ExtendedDerivedArrayStack</code>
we adopt a strategy that does not access the data members of the class
<code class=code>ArrayLinearList</code>. 
Adopting this strategy means that changes in the implementation
of
<code class=code>ArrayLinearList</code> do not require us to
make any changes to the class
<code class=code>ExtendedDerivedArrayStack</code>.  At the same time,
this strategy results in code that is less efficient than
code that directly accesses the data members of
<code class=code>ArrayLinearList</code>. The nature
of the more efficient code that is possible when direct access
is made to the data members of
<code class=code>ArrayLinearList</code> is illustrated by
our implementation of <code class=code>ExtendedArrayStack</code>.
<br><br>
The code for the class <code class=code>ExtendedDerivedArrayStack</code> is:
<HR class = coderule>
<PRE class = code>
public class ExtendedDerivedArrayStack extends DerivedArrayStack
                                       implements ExtendedStack
{
   // constructors
   /** create a stack with the given initial capacity */
   public ExtendedDerivedArrayStack(int initialCapacity)
      {super(initialCapacity);}

   /** create a stack with initial capacity 10 */
   public ExtendedDerivedArrayStack()
      {this(10);}

   // methods of ExtendedStack
   // methods size() and toString() are inherited from ArrayLinearList

   /** input a stack from the input stream inStream using
     * the method inputMethod to input each element */
   public void input(Method inputMethod, MyInputStream inStream)
   {
      // first empty the stack
      for (int i = size() - 1; i &gt;= 0; i--)
         remove(i);

      // input size of new stack
      System.out.println("Enter number of elements in stack");
      int s = inStream.readInteger();
      if (s &lt; 0)
         throw new MyInputException
                   ("stack size must be &gt;= 0");

      // input the stack elements bottom to top
      Object [] inputMethodArgs = {inStream};
      System.out.println("Enter stack elements from bottom to top");
      try
      {
         for (int i = 0; i &lt; s; i++)
            add(i, inputMethod.invoke(null, inputMethodArgs));
      }
      catch (Exception e)
      {
         System.out.println(e);
         throw new IllegalArgumentException
                   ("input method for stack element type is incorrect");
      }
   }

   /** split the stack this into the stacks a and b
     * a gets the bottom-half elements, b gets the rest */
   public void split(ExtendedStack a, ExtendedStack b)
   {
      // first emty out a and b
      for (int i = a.size() - 1; i &gt;= 0; i--)
         ((ExtendedDerivedArrayStack) a).remove(i);
      for (int i = b.size() - 1; i &gt;= 0; i--)
         ((ExtendedDerivedArrayStack) b).remove(i);

      // put bottom-half elements into a
      int halfSize = size() / 2;
      for (int i = 0; i &lt; halfSize; i++)
         ((ExtendedDerivedArrayStack) a).add(i, get(i));

      // put remaining elements into b
      for (int i = halfSize; i &lt; size(); i++)
         ((ExtendedDerivedArrayStack) b).add(i - halfSize, get(i));
   }

   /** set the stack this to contain the elements in a
     * followed by those in b */
   public void combine(ExtendedStack a, ExtendedStack b)
   {
      // first emty out this
      for (int i = size() - 1; i &gt;= 0; i--)
         remove(i);

      // put elements of a into this
      for (int i = 0; i &lt; a.size(); i++)
         add(i, ((ExtendedDerivedArrayStack) a).get(i));

      // put elements of b into this
      for (int i = 0; i &lt; b.size(); i++)
         add(a.size() + i, ((ExtendedDerivedArrayStack) b).get(i));
   }
}
</pre>
<HR class=coderule><BR><br>

The code for the class <code class=code>ExtendedArrayStack</code> is:
<HR class = coderule>
<PRE class = code>
public class ExtendedArrayStack extends ArrayStack
                                implements ExtendedStack
{
   // constructors
   /** create a stack with the given initial capacity */
   public ExtendedArrayStack(int initialCapacity)
      {super(initialCapacity);}

   /** create a stack with initial capacity 10 */
   public ExtendedArrayStack()
      {this(10);}

   // methods of ExtendedStack
   /** @return number of elements in the stack */
   public int size()
      {return top + 1;}

   /** input a stack from the input stream inStream using
     * the method inputMethod to input each element */
   public void input(Method inputMethod, MyInputStream inStream)
   {
      // input size of new stack
      System.out.println("Enter number of elements in stack");
      int s = inStream.readInteger();
      if (s &lt; 0)
         throw new MyInputException
               ("stack size must be &gt;= 0");

      // increase array size if necessary
      if (s &gt; stack.length)
         stack = new Object [s];

      // input the stack elements bottom to top
      Object [] inputMethodArgs = {inStream};
      System.out.println("Enter stack elements from bottom to top");
      try
      {
         for (int i = 0; i &lt; s; i++)
            stack[i] = inputMethod.invoke(null, inputMethodArgs);
      }
      catch (Exception e)
      {
         System.out.println(e);
         throw new IllegalArgumentException
               ("input method for stack element type "
                + "is incorrect");
      }

      top = s - 1;
   }

   /** convert to a string */
   public String toString()
   {
      StringBuffer s = new StringBuffer("["); 
      if (top &gt;= 0)
      {// nonempty stack
         // do first element
         s.append(stack[0].toString());
         // do remaining elements
         for (int i = 1; i &lt;= top; i++)
            s.append(", " + stack[i].toString());
      }
      s.append("]");

      // create equivalent String
      return new String(s);
   }

   /** split the stack this into the stacks a and b
     * a gets the bottom-half elements, b gets the rest */
   public void split(ExtendedStack a, ExtendedStack b)
   {
      // determine size of resulting stacks a and b
      int sizeOfA = size() / 2;
      int sizeOfB = size() - sizeOfA;

      // cast a and b into ExtendedArrayStacks
      ExtendedArrayStack aa = (ExtendedArrayStack) a;
      ExtendedArrayStack ab = (ExtendedArrayStack) b;

      // make sure array sizes are adequate
      if (sizeOfA &gt; aa.stack.length)
         aa.stack = new Object [sizeOfA];
      if (sizeOfB &gt; ab.stack.length)
         ab.stack = new Object [sizeOfB];

      // put bottom-half elements into a
      for (int i = 0; i &lt; sizeOfA; i++)
         aa.stack[i] = stack[i];
      aa.top = sizeOfA - 1;

      // put remaining elements into b
      for (int i = sizeOfA; i &lt;= top ; i++)
         ab.stack[i - sizeOfA] = stack[i];
      ab.top = sizeOfB - 1;
   }

   /** set the stack this to contain the elements in a
     * followed by those in b */
   public void combine(ExtendedStack a, ExtendedStack b)
   {
      // cast a and b into ExtendedArrayStacks
      ExtendedArrayStack aa = (ExtendedArrayStack) a;
      ExtendedArrayStack ab = (ExtendedArrayStack) b;

      // make sure array size is adequate
      top = aa.top + ab.top + 1;  // new top of this
      if (top &gt;= stack.length)
         stack = new Object [top + 1];

      // put elements of a into this
      for (int i = 0; i &lt;= aa.top; i++)
         stack[i] = aa.stack[i];

      // put elements of b into this
      for (int i = 0; i &lt;= ab.top; i++)
         stack[i + aa.top + 1] = ab.stack[i];
   }
}
</pre>
<HR class=coderule><BR><br>
<dt> (d)
<dd>
The test programs, input, and output are in the files
<code class=code>ExtendedDerivedArrayStack.*</code>
and <code class=code>ExtendedArrayStack.*</code>
--!>

</FONT>
</BODY>
</HTML>
