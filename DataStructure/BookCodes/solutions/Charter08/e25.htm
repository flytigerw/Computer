
<HTML>
<HEAD>
<LINK rel="stylesheet" href="../exer.css">
</HEAD>
<BODY>
<H1>
Data Structures, Algorithms, & Applications in C++<BR>
Chapter 8, Exercise 25<BR>
<BR>
</H1>
First observe that at most
<code class=var>n - 1</code> cars can get on to the stacks
because at least one car must go directly from the input track to the
output track.  Therefore, the size each track need be at most
<code class=var>n - 1</code>.
The first track can get this many cars.  This happens when the
input permutation is <code class=var>[1, 2, 3, ..., n]</code>.
With this permutation, cars
<code class=var>2, 3, ...,</code>
and <code class=var>n</code> get added to stack <code class=var>1</code>.
Whenever a car is added to stack <code class=var>2</code>, stack
<code class=var>1</code> contains one or more cars.
So stack <code class=var>2</code> can get at most
<code class=var>n - 2</code> cars.  It gets this many when the
input permutation is <code class=var>[1, 3, 4, ..., n, 2]</code>.
In general the <code class=var>i</code>th stack can get at most
<code class=var>n - i</code> cars and so its
size must be at least this much.
The input permutation
<code class=var>[1, i + 1, i + 2, ..., n, i,
i - 1, ..., 2]</code> represents the worst case for stack
<code class=var>i</code>.

</FONT>
</BODY>
</HTML>
