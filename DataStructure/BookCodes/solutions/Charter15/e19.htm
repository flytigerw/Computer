

<HTML>
<HEAD>
<LINK rel="stylesheet" href="../exer.css">
</HEAD>
<BODY>
<H1>
Data Structures, Algorithms, & Applications in C++<BR>
Chapter 15, Exercise 19<BR>
<BR>
</H1>


Methods <code class=code>outputFromHoldingTrack</code> (Program 8.11)
and <code class=code>putIntoHoldingTrack</code> (Program 8.12)
currently take <code class=code>Theta(numberOfTracks)</code> time.
As suggested at the end of Section 8.5.3 we can augment
the data structures used in Section 8.5.3 with an AVL tree
<code class=var>t</code>.
The AVL tree <code class=var>t</code> contains the top
cars (together with the holding tracks they
come from) in each of the holding tracks, and the search key used is the
car index.
<br><br>
When the top car is deleted from holding track
<code class=code>itsTrack</code> in method <code class=code>outputFromoldingTrack</code>,
this car must be deleted from the AVL tree and the new car at the
top of holding track
<code class=code>itsTrack</code> inserted.  Each of these operations
takes <code class=var>O(log nmberOfTracks)</code> time.  We can find the new
<code class=code>smallestCar</code> and
<code class=code>itsTrack</code>
by making as many left child moves as possible starting
at the root of the AVL tree.
Therefore, the complexity of <code class=code>outputFromHoldingTrack</code>
is now <code class=var>O(log numberOfTracks)</code>.
<br><br>
In method <code class=code>putInHoldingTrack</code> we must first find the
holding track with the smallest car <code class=code>&gt; c</code>
at its top.  This can be done by starting at the root of the AVL
tree and walking down to a leaf.  If the car in the current AVL tree
node is <code class=code>&lt; c</code>, we move into the right subtree
of this node (the left subtree contains smaller cars which are
not candidates for the answer); and if the car in the current
AVL tree node is <code class=code>&gt; c</code>, it is the
best candidate for the answer found so far and we move into its left subtree
looking for a better candidate (the right subtree contains worse candidates).
The described search takes <code class=code>O(height of tree) = O(log numberOfTracks)</code>
time.
<br><br>
Whe <code class=code>c</code> is added to the best holding track,
we must delete the corresponding entry from the AVL tree and insert the
car <code class=code>c</code> together with its holding track number
into the AVL tree.  The overall complexity of <code class=code>putInHoldingTrack</code>
is now <code class=var>O(log numberOfTracks)</code>.

<br><br>
Since the use of an AVL tree as described above reduces the
complexity of both <code class=code>outputFromHoldingTrack</code> and
<code class=code>putInHoldingTrack</code> to <code class=var>O(log numberOfTracks)</code>,
the overall complexity of the solution of Section 8.5.3
becomes <code class=var>O(n log numberOfTracks)</code>.



</FONT>
</BODY>
</HTML>
