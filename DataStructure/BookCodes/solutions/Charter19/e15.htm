<HTML>
<HEAD>
<LINK rel="stylesheet" href="../exer.css">
</HEAD>
<BODY>
<H1>
Data Structures, Algorithms, & Applications in C++<BR>
Chapter 19, Exercise 15<BR>
<BR>
</H1>

Since we are interested only in the existence of a path,
we can change <code class=var>c(i,j,k)</code> to be a
boolean valued method.
<code class=var>c(i,j,k)</code> is <code class=code>false</code> iff there is
no path from vertex <code class=var>i</code> to vertex <code class=var>j</code>
that has no intermediate vertex larger than
<code class=var>k</code>.
<br><br>
With this change, we see that
<code class=var>c(i,j,0)</code> is <code class=code>false</code>
iff <code class=var>i != j</code> and
there is
no edge from vertex <code class=var>i</code> to vertex <code class=var>j</code>.
Further, the recurrence for
<code class=var>c(i,j,k)</code> can be rewritten
using logical operators.  The new equation is<br>
<code class=var>c(i,j,k) = c(i,j,k-1) || (c(i,k,k-1) && c(k,j,k-1), k &gt; 0</code>
<br><br>
<!--
These changes together with the observation that we
need no longer compute <code class=var>kay</code>
result in the transitive closure code given below.
A test program, input, and output appear in
the files <code class=code>TestReflexiveTransitiveClosure.*</code>.
The complexity of the method
<code class=code>AdjacencyDigraph.reflexiveTransitiveClosure</code>
is seen to be the same as that
of Program 20.8; that is <code class=var>O(n<sup>3</sup>)</code>.

<HR class = coderule>
<pre class = code>
public class AdjacencyDigraphWithReflexiveTransitiveClosure
             extends AdjacencyDigraph
{
   // constructors
   public AdjacencyDigraphWithReflexiveTransitiveClosure(int theVertices)
      {super(theVertices);}
   
   // default is a 0 vertex graph
   public AdjacencyDigraphWithReflexiveTransitiveClosure()
      {this(0);}

   /** dynamic programming code to return the reflexive
     * transitive closure matrix of a digraph graph, code is
     * a modification of Program 20.8 */
   public boolean [][] reflexiveTransitiveClosure()
   {
      // create array for reflexive transitive closure
      boolean [][] rtc = new boolean [n + 1][n + 1];
   
      // copy adjacency matrix into rtc
      for (int i = 1; i &lt;= n; i++)
         for (int j = 1; j &lt;= n; j++)
            rtc[i][j] = a[i][j];
   
      // set diagonal entries to true
      for (int i = 1; i &lt;= n; i++)
         rtc[i][i] = true;
   
      // 3 nested loops of Program 20.8 using logical operators
      for (int k = 1; k &lt;= n; k++)
         for (int i = 1; i &lt;= n; i++)
            for (int j = 1; j &lt;= n; j++)
               rtc[i][j] = rtc[i][j] || (rtc[i][k] &amp;&amp; rtc[k][j]);
   
      return rtc;
   }
}
<hr class=coderule>
</pre>
--!>

</FONT>
</BODY>
</HTML>
