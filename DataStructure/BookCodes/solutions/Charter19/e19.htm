
<HTML>
<HEAD>
<LINK rel="stylesheet" href="../exer.css">
</HEAD>
<BODY>
<H1>
Data Structures, Algorithms, & Applications in C++<BR>
Chapter 19, Exercise 19<BR>
<BR>
</H1>

<ol>
<li>
If component <code class=var>i</code> has a supplier <code class=var>k</code>
whose product has weight and cost greater than or equal to that of the
product from supplier <code class=var>q</code>, then supplier
<code class =var>k</code> may be eliminated for this component because
there is no advantage to using this supplier over supplier
<code class=var>q</code>.
<br><br>
<li>
Relabel the suppliers that remain for each component so that the first supplier
has least cost (and hence maximum weight) and the last supplier has
maximum cost (and hence least weight).
Notice that following the elimination of item (1), two suppliers cannot
provide the same component with the same weight or the same cost.
<br><br>
<li>
We obtain the following dynamic programming equations:
<br><br>
If component <code class=var>1</code> has one supplier remaining, then
<code class=var><br>
w(1,j) =  infinity, j &lt; C<sub>1,1</sub><br>
w(1,j) = W<sub>1,1</sub>, C<sub>1,1</sub> &lt;= j &lt;= c<br>
</code> <br>
If component <code class=var>1</code> has two suppliers remaining, then
<code class=var><br>
w(1,j) =  infinity, j &lt; C<sub>1,1</sub><br>
w(1,j) = W<sub>1,1</sub>, C<sub>1,1</sub> &lt;= j &lt; C<sub>1,2</sub><br>
w(1,j) = W<sub>1,2</sub>,
C<sub>1,2</sub> &lt;= j &lt;= c<br>
</code> <br>
If component <code class=var>1</code> has three suppliers remaining, then
<code class=var><br>
w(1,j) =  infinity, j &lt; C<sub>1,1</sub><br>
w(1,j) = W<sub>1,1</sub>, C<sub>1,1</sub> &lt;= j &lt; C<sub>1,2</sub><br>
w(1,j) = W<sub>1,2</sub>,
C<sub>1,2</sub> &lt;= j &lt; C<sub>1,3</sub><br>
w(1,j) = W<sub>1,3</sub>,
C<sub>1,3</sub> &lt;= j &lt;= c</sub><br>
<br><br>
and
<br><br>
If component <code class=var>i</code>,
<code class=var>1 &lt; i &lt;= n</code>,
has one supplier remaining, then
<code class=var><br>
w(i,j) =  infinity, j &lt; C<sub>i,1</sub><br>
w(i,j) = W<sub>i,1</sub> + w(i-1, j-C<sub>i,1</sub>), C<sub>i,1</sub> &lt;= j
             &lt;= c<br>
</code><br>
If component <code class=var>i</code>,
<code class=var>1 &lt; i &lt;= n</code>,
has two suppliers remaining, then
<code class=var><br>
w(i,j) =  infinity, j &lt; C<sub>i,1</sub><br>
w(i,j) = W<sub>i,1</sub> + w(i-1, j-C<sub>i,1</sub>), C<sub>i,1</sub> &lt;= j
             &lt; C<sub>i,2</sub><br>
w(i,j) = min{W<sub>i,1</sub> + w(i-1, j-C<sub>i,1</sub>),
             W<sub>i,2</sub> + w(i-1, j-C<sub>i,2</sub>)},
             C<sub>i,2</sub> &lt;= j &lt;= c<br>
</code><br>
If component <code class=var>i</code>,
<code class=var>1 &lt; i &lt;= n</code>,
has three suppliers remaining, then
<code class=var><br>
w(i,j) =  infinity, j &lt; C<sub>i,1</sub><br>
w(i,j) = W<sub>i,1</sub> + w(i-1, j-C<sub>i,1</sub>), C<sub>i,1</sub> &lt;= j
             &lt; C<sub>i,2</sub><br>
w(i,j) = min{W<sub>i,1</sub> + w(i-1, j-C<sub>i,1</sub>),
             W<sub>i,2</sub> + w(i-1, j-C<sub>i,2</sub>)},
             C<sub>i,2</sub> &lt;= j
             &lt; C<sub>i,3</sub><br>
w(i,j) = min{W<sub>i,1</sub> + w(i-1, j-C<sub>i,1</sub>),
             W<sub>i,2</sub> + w(i-1, j-C<sub>i,2</sub>),
             W<sub>i,3</sub> + w(i-1, j-C<sub>i,3</sub>)},
             C<sub>i,3</sub>&lt;=j&lt=c<br>
</code>
<br><br>
</ol>
<br><br>
We may determine the supplier for each component as follows:
<dl>
<dt><strong>Step 1</strong>
<dd>
Eliminate suppliers as in item 1 above and relabel suppliers
as in item 2.
This takes <code class=var>O(n)</code> time.
<dt><strong>Step 2</strong>
<dd>
Compute <code class=var>w(1,j)</code> for <code class=code>0 &lt;= j &lt;= c</code>
using the equation for <code class=var>w(1,j)</code> obtained in item 3 above.
This takes <code class=var>O(c)</code> time.
<dt><strong>Step 3</strong>
<dd>
Compute <code class=var>w(i,j)</code> for 
<code class=var>i = 2, ..., n</code>, in that order,
using the equation for <code class=code>w(i,j)</code>
developed in item 3 above. For each <code class=var>i</code>,
compute <code class=var>w(i,j)</code> for
<code class=code>0 &lt;= j &lt;= c</code> (this can be done in any
order).
It takes <code class=var>O(cn)</code> time to compute all of these
<code class=var>w(i,j)</code> values.
<dt><strong>Step 4</strong>
<dd>
<code class=var>w(n,c)</code> gives the least weight machine
that can be constructed at a cost that does not exceed
<code class=var>c</code>.
The supplier for each component is determined by using a traceback procedure
for <code class=var>w(n,c)</code>.
Assume that <code class=var>w(n,c) != infinity</code>. Therefore, it is possible
to build the machine at a cost that does not exceed <code class=var>c</code>.
<br><br>
The traceback for <code class=var>w(i,j)</code> is recursive.
When <code class=var>i = 1</code>, there are three cases to consider.
If <code class=var>w(1,j) = W<sub>1,1</sub></code>, get component
<code class=var>1</code> from supplier <code class=var>1</code>,
if <code class=var>w(1,j) = W<sub>1,2</sub></code>, get component
<code class=var>1</code> from supplier <code class=var>2</code>;
otherwise,
get component
<code class=var>1</code> from supplier <code class=var>3</code>.
<br><br>
When <code class=var>i &gt; 1</code>, there are also three cases to consider.
If
<code class=var>w(i,j) = W<sub>i,1</sub> + w(i-1, j-C<sub>i,1</sub>)</code>,
then get component <code class=code>i</code> from supplier
<code class=var>1</code>
and do a traceback for <code class=var>w(i-1, j-W<sub>i,1</sub>)</code>
to determine the suppliers for the remaining components;
if
<code class=var>w(i,j) = W<sub>i,2</sub> + w(i-1, j-C<sub>i,2</sub>)</code>,
then get component <code class=code>i</code> from supplier
<code class=var>2</code>
and do a traceback for <code class=var>w(i-1, j-W<sub>i,2</sub>)</code>
to determine the suppliers for the remaining components;
otherwise,
get component <code class=code>i</code> from supplier
<code class=var>3</code>
and do a traceback for <code class=var>w(i-1, j-W<sub>i,3</sub>)</code>
to determine the suppliers for the remaining components.
The traceback takes <code class=var>O(n)</code> time.
</dl>
<br><br>
From the above description and analysis, we see that the overall complexity
is <code class=var>O(cn)</code>.
</FONT>
</BODY>
</HTML>
