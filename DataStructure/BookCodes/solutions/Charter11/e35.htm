
<HTML>
<HEAD>
<LINK rel="stylesheet" href="../exer.css">
</HEAD>
<BODY>
<H1>
Data Structures, Algorithms, & Applications in C++<BR>
Chapter 11, Exercise 35<BR>
<BR>
</H1>
Suppose we are told that the postorder and inorder listings of
a binary tree are <code class=var>postList[0:6] =
[5, 3, 1, 6, 4, 2, 0]</code> and <code class=var>inList[0:6] =
[3, 5, 1, 0, 2, 6, 4]</code>.
From the definition of postorder we know that <code class=var>postlist[6] = 0</code>
is the root.  From the definition of inorder we know that in inorder the
root is preceded by its left subtree and followed by its right subtree.
So <code class=var>inList[0:2]</code> is the inorder listing of the
left subtree and
<code class=var>inList[4:6]</code> is the inorder listing of the
right subtree.  The left and right subtrees can now be constructed
recursively using this information.
It is convenient to construct the right subtree first because
when we scan the postorder listing from right to left, we
first encounter the nodes in the right subtree and then the nodes in
the left subtree.
<br><br>
To implement the above strategy efficiently it is useful
to construct an array <code class=var>inMap[]</code>
with the property that <code class=var>inMap[i]</code>
gives the location of <code class=var>postList[i]</code> in
<code class=var>inList[i]</code>.  For the example above
<code class=var>inMap[0:6] = [1, 0, 2, 5, , 4, 3]</code>.
This mapping array enables us to quickly find the location of
<code class=var>postList[i]</code> in
<code class=var>inList[]</code>.
<br><br>
If we make the assumption that the data elements of an
<code class=var>n</code> node binary tree are <code class=code>0, 1, ...,
n-1</code>, we can construct <code class=var>inMap</code>
in linear time as below.
<HR class = coderule>
<pre class = code>
// construct inMap
// first construct inverse of InList
int *inverse = new int [n];
for (int i = 0; i &lt; n; i++)
   inverse[inList[i]] = i;
// now construct inMap
for (int i = 0; i &lt; n; i++)
   inMap[i] = inverse[postList[i]];
<hr class=coderule>
</pre>

When we cannot make this assumption we can construct
<code class=var>inMap</code> by sorting both
<code class=var>inList</code> and
<code class=var>postList</code>.  This sort will take linear time
if the range of data values is small (in this case bin sort
(see Chapter 6) can be used) and the sort will take
<code class = var>O(n log n)</code> time 
when we must sort using the general purpose sorts of Chapters 12 (heap
sort) and 18 (merge sort).
<br><br>
<!--
The code to build the binary tree is given below.
This code assumes that the elements are distinct integers in the
range <code class=code>1</code> through <code class=code>n-1</code>,
where <code class=code>n</code> is the number of elements/nodes in the tree.
A test program and its ouput are given in the files
<code class=var>BuildFromPostAndIn.*</code>.
<HR class = coderule>
<pre class = code>
public class BuildFromPostAndIn
{
   // class data members
   static int [] inMap;
   static int [] postList;
   static int endPost;

   /** construct the unique binary tree with postorder listing
     * thePostList[] and inorder listing theInList.
     * The tree elements are assumed to be the distinct integers
     * 0 through theInList.length - 1.
     * return root of constructed binary tree */
   public static BinaryTreeNode buildFromPostAndIn
                 (int [] thePostList, int [] theInList)
   {// set class data members and invoke theBuildFromPostAndIn

      postList = thePostList;
      endPost = postList.length - 1; 
                // postorder list for subtree ends at postList[endPost]

      // set inMap so that inMap[i] is the location of
      // thePostList[i] in theInList[]
      // first construct inverse of theInList
      int [] inverse = new int[theInList.length];
      for (int i = 0; i &lt; theInList.length; i++)
         inverse[theInList[i]] = i;
      // now construct inMap
      inMap = new int [theInList.length];
      for (int i = 0; i &lt; theInList.length; i++)
         inMap[i] = inverse[postList[i]];

      return theBuildFromPostAndIn(0, inMap.length - 1);
   }


   /** construct the unique binary tree with inorder listing
     * inList[startIn:endIn] and whose postorder listing is
     * postList[... endPost]. inMap[i] is the location of
     * postList[i] in inList[]. Note that inList is not a
     * parameter of the method.
     * return root of constructed binary tree */
   static BinaryTreeNode theBuildFromPostAndIn(int startIn, int endIn)
   {
      if (startIn &gt; endIn)
         // tree is empty
         return null;
     
      // create a node for the root and set its element field
      BinaryTreeNode root = new BinaryTreeNode(new Integer(postList[endPost]));

      // verify that element is in the proper subtree
      int inLocation = inMap[endPost--];
      if (inLocation &lt; startIn || inLocation &gt; endIn)
         throw new IllegalArgumentException
                   ("incompatible postorder and inorder listings");
   
      // construct right subtree recursively
      root.rightChild = theBuildFromPostAndIn(inLocation + 1, endIn);

      // construct left subtree recursively
      root.leftChild = theBuildFromPostAndIn(startIn, inLocation - 1);
   
      return root;
   }
}
<hr class=coderule>
</pre>
<br><br>
The complexity of <code class=var>BuildFromPostAndIn</code>
is Theta(<code class=var>n</code>).  So the overall
complexity of the construction process is determined
by the complexity of constructing <code class=var>InMap</code>.
In general, this takes
O(<code class = var>n</code> log <code class=var>n</code>) time .
--!>


</FONT>
</BODY>
</HTML>
