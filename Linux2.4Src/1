
1.操作系统既包含管理用户进程的部分:进程管理
          也包含为用户进程提供服务的部分:进程间通信，设备驱动，文件系统
  提供服务的部分和使用这些服务的进程之间形成C/S结构

  服务提供者不一定非得留在内核
  其本身也可以设计成为服务进程
  必须留在内核的成分只有 进程间通信
  服务进程就可以从内核中游离出来，单独设计，实现和调试 --> 微内核的思想
  用户进程通过内核的 进程间通信 向服务进程请求服务，服务进程运行后，将结果再通过 进程间通信 返回给用户进程
  缺点:进程间通信过于频繁，增加系统开销


2.CPU为16位 --> 处理器中ALU(算术逻辑单元)的宽度
  数据总线通常与ALU有相同的宽度
  那么地址总线宽度呢?

  在8086中，数据总线宽度为16位
  若地址总线宽度也为16位
  那么可寻址的物理地址空间为:2^16 --> 64k --> 太小
  而实际上，8086含有1M的寻址空间  --> 地址线宽度为20位
  问题:CPU只能给出16位的地址，怎样才能补充到20位?
  Intel采用了分段的方法:
    CPU中含有4个段寄存器:CS,DS,SS,ES
    分别用于指令寻址,数据寻址,堆栈和其他寻址
    每个段寄存器为16位，对应地址总线的高16位
    CPU访存时，会给出16位地址，与某个段寄存器内容相加得到20位地址: Reg << 4 + addr
  
  缺点:没有地址空间的保护机制
       对于每个由 段寄存器确定的基地址，用户进程可以随意访问 以此开始的64K的地址空间 --> 没有限制
       而且改变段寄存器内容的指令并非特权指令 --> 用户进程可通过改变段寄存器内容来访问内存中任何一个单元

  80386则实现了保护模式
  其为32CPU，地址总线宽度也为32位 --> 4G的寻址空间
  要实现保护模式，只通过段寄存器知道 地址段的基地址 是不够的
                  还需要知道地址段的长度，访问权限等信息
                  可以用一个数据结构来存放这些信息  --> 段描述项
  于是可以内存中设计段表 ---> 存储段描述项
  段寄存器的内容则用于在索引段表  

  80386设计了两张段表:GDT,LDT. 段表项:pdf17
  其基地址分别有寄存器GDTR,LDTR指示
  访问这两个寄存器的指令为为特权指令
  段寄存器的结构:
  0~1 :RPL,00表示最高级，11最低
  2   :0表示使用GDTR
  3~15:索引段表

  段式内存管理的大概寻址过程:
  1)CPU给出32位虚拟地址
  2)先通过段寄存器索引段表，得到段描述项
  3)根据段描述项中的信息进行 访问权限检查 以及 访问是否越界
  4)检查段描述项中的P标志位，看目标段是否在内存中，若没有则先将其从swap区载入内存
  5)然后根据段描述项中记录的基地址+虚拟地址，变换得到物理地址



3.i386的页式内存管理
  段式内存管理的缺点:swap区的的存储单元为block 
                     而段长度可变 --> 可能非整数个block --> 为swap交换带来不便
  改进:内存以页为单位
       页和block之间为整数关系  --> swap时便于分配block
  用页表记录每一页的基地址
  而页数可能会很多，导致页表很大
  比如:假设内存为4G，页面大小为4K，那么页面数为:2^20
       假设每个页表项为4字节
       那么需要2^10张 连续内存页 来存放页表

  可采用多级页表来去掉连续内存页的需求:
  增加页目录表，每个表项都记录页表基址
  各个页表就可以在内存中离散存放

  CPU给出的虚拟的地址结构:
  0~11 : 页内偏移
  12~21: 页表偏移
  22~31: 页目录偏移

  CPU给出的虚拟地址映射到物理地址的简要过程(不涉及任何权限检查):
  1)页目录基址存放在CR3寄存器中
    所以首先用虚拟地址的高10位索引页目录表,根据表项得到页表基址
  2)再用中间10位索引页表，根据页表得到内存页基地址
  3)内存页基址 + 页内偏移得到物理地址

  i386是在段式内存管理基础上实现页式内存:
  1)根据段寄存器索引段表
    根据段描述符项中记录的基地址将虚拟地址变换为线性地址
  2)再将线性地址通过 页式变换 转为物理地址
  由上可知，段式变换作用不大，只不过是历史的遗留


4.部分C语言代码技巧:
  1)用attribute进行属性描述
    例如:
    struct foo{
      char a;
      int x[z] attribute__((packed));
    }
    属性描述packed表示 字符a与整形数组x之间 不应为了 进行32为长整数边界对齐 而留下空洞

  2)在宏定义中使用do-while(0),以兼容各种展开情景
    比如:
     #define DUMP_WRITE(addr,nr) do{memcpy(bufp,addr,nr);bufp += nr;} while(0)
    若定义为:
     #define DUMP_WRITE(addr,nr) memcpy(bufp,addr,nr);bufp += nr;
    则可能在以下展开情景出现错误:
    if(addr)
      DUMP_WRITE(addr,nr);
    else 
      do_sth_else();
    展开为:
    if(addr)
      memcpy(bufp,addr,nr);bufp += nr;    --> 编译错误,gcc会认为if语句再memcpy()之后就结束了
    else 
      do_sth_else();
    若定义为:
      #define DUMP_WRITE(addr,nr) {memcpy(bufp,addr,nr);bufp += nr;}
    则会展开为:
    if(addr)
      {memcpy(bufp,addr,nr);bufp += nr;};    --> 编译错误,gcc在碰到else前面的;时就认为if语句已结束 
    else 
      do_sth_else();
    do-while(0)式的展开:
    if(addr)
      do{memcpy(bufp,addr,nr);bufp += nr;}while(0);    --> no problem
    else 
      do_sth_else();

  3)*((int*)&i)++ --> 编译成INC指令     --> 原子性
    i++           --> 编译成MOV,ADD,MOV --> 非原子性

5.内联汇编
  简单的格式:
  #define __SLOW_DOWN_IO __asm__ __volatile__("jmp 1f \n1:\t jmp1f\n1")
  \n为换行符，\t为TAB符
  展开为:
    jmp 1f
1:  jmp 1f
1:
  该段汇编的作用:让CPU空做两条指令而消耗一些时间
  若要将 寄存器/内存单元 与C代码中的变量 结合起来，则要用完整的格式:
  __asm__ __volatile__{
    指令部
   :输出部
   :输入部
   :损坏部    //用得少
  }
  输出部格式:"=c1"(var1),"=c2"(var2)....
  输入部格式:"c1"(var1),"c2"(var)....
  c表示操作数，类型见pdf35
  使用的每个操作数都有一个计数值，从输出部的第一个操作数为起点，依次为:%0,%1...
  可以 引用计数值 来表示使用某个操作数

  例子:
  1)static __inline__ void atomic_add(int i,atomic_t* v){
      __asm__ __volatile__(
          LOCK "addl %1,%0"           //LOCK表示将总线锁住，保证操作的原子性
          :"=m"(v->counter)          //操作数m(%0)表示某个内存单元，与v->counter绑定在一起
          :"ir"(i),"m"(v->counter)   //操作数ir(%1)表示直接操作数，与变量i绑定在一起
        );                           //操作数m(%2)表示某个内存单元，与v->counter绑定在一起
    }

  2)static inline void * __memcpy(void* to,const void* from,size_t n){
      int d0,d1,d2;
      __asm__ __volatile__(


      );
      return (to);
    } 
  



  
  
  
  
      
