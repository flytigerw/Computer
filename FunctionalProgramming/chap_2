



高阶函数(High-order function):能够 接收函数作为参数 或者 将函数作为返回结果 的函数

一元谓词函数:unitary_op
二元谓词函数:binary_op

例子:
输入一组人,要求输出组内所有女性的名字

1)首先过滤出所有的女性
  filter(people,is_female)

  filter: (Collection<T>, (T)->bool) -> Collection<T>
  输入          :集合 + unitary_op
  函数的内部处理:遍历集合中的每个条目,将其输入给unitary_op
                 若其满足用户自定义的过滤条件,则将其放入到结果集中
  输出          :满足过滤条件的条目集

  使用STL来实现filter:
  1)允许修改原有集合:erase-remove风格的remove_if
    pepole.erase(
                 remove_if(people.begin(),people.end(),is_not_female),
                 people.end())
    remove和remove_if不知道迭代器底层的容器结构,不能直接删除容器元素
                     只能将满足删除条件的元素移到集合前面
                     返回第一个不满足条件的元素的位置

  2)不改变原有集合(pure):
    vector<person_t> females;
    copy_if(people.cbegin(),people.cend(),
            back_inserter(females),           //目标容器大小不能确定 --> 所以需要能改变容器结构的迭代器
            is_female)
    
    copy_if函数:
    输入:集合+输出点+一元谓词 --> Collection<T>, Inter<T>, (T)->bool
    功能:将原集合中满足谓词条件的元素复制到新集合中


2)获取女性的名字
  transform(people,name)

  transform: (Collection<In>, (In->Out)) -> Collection<Out>
  输入          :集合 +  一元谓词函数
  函数的内部处理:遍历集合中的每个条目,将其输入给一元谓词函数 --> 对旧条目做某种变换处理,返回一个新的,处理后的条目
                 将新条目放到结果集中
  输出          :新条目集

  transform(filter(people,is_female),name)

  STL实现:
  vector<string> names(females.size());
  transform(females.cbegin(),females.cend(),
            names.begin(),        --> 目标容器大小已确定,用常规迭代器即可. 
            name)
  
  transform函数:
  输入:集合+输出点+一元谓词 -> Collection<In>, Iter<Out>, (In)->Out
  功能:对集合中的每个元素进行转换,形成新元素

基于STL的完整代码:
vector<person_t> females;
copy_if(people.cbegin(),people.cend(),
        back_inserter(females),           
        is_female)

vector<string> names(females.size());
transform(females.cbegin(),females.cend(),
          names.begin(),        
          name)

缺点:30+PPT

此例求解集合中女性的名字 -->  筛选的谓词条件:性别
对其进行扩展,使其更加具有通用性 --> 由用户指定筛选谓词条件(年龄,肤色..),然后求解筛选后的人的名字
template<typename FilterFunction>
vector<string> names_for(const vector<person_t>& people,FilterFunction filter)    --> 高阶函数
  


2.STL以算法的名义提供了许多高阶函数，这些函数是许多 通用编程模式 的高效实现
  使用STL,而非低层次的循环,分支,递归,可以使代码更短小精壮
  例子:
  1)分数的平均值
    a.命令式编程
      double average_score(const vector<int>& scores){
            int sum = 0;
            for(auto score : scores){
              sum += score;
            }
            retrurn sum / (double)socres.size();
      }

    b.基于STL的函数式编程:
      double average_score(const vector<int>& scores){
          return accumulate(scores.cbegin(),scores,cend(),  
                            0) / (double)scores.size();     //减少函数的状态变量
      }

    
    C++17允许某些STL算法以并行方式执行
    并行版本:reduce函数+std::execution::par策略 --> pdf21
      double average_score(const vector<int>& scores){
          return reduce(std::execution::par,
                        scores.cbegin(),scores,cend(),  
                        0) / (double)scores.size();     
      }

      
3.折叠(Folding): (colleciton<T>,R,(R,T)->R) -> R
  输入    :T类型的集合c，R类型的初始值r，binary_op f
  内部处理:r1 = f(r,c[0])
           r2 = f(r1,a[1])
           ......
           rn = f(rn-1,c[n-1])
  输出:rn

  用于对 递归结构(比如vector,list,tree)等遍历处理. 
  处理特点:能逐步构建与累积.比如求和
  

  accumalte是Folding的一种实现,其binary_op参数默认为std::add<T>()
  也可以逐步构建乘积值:
  double average_score(const vector<int>& scores){
       return accumulate(scores.cbegin(),scores,cend(),  
                         1,
                         std::mutiplies<int>()) / (double)scores.size();     
  }

4.删除字符串前后中的空白符
  应用:读取文件中的一行，显示在屏幕中央.
       若保留前后的空白符，文本不会居中显示
  
  删除前导空白符:
  string trim_left(string str){
    s.erase(s.begin(),find_if(s.begin(),s.end(),is_notspace));   //删除 [起点 从左到右的第一个非空白符) 之间的空白符
    return s;
  }
  find_if函数:
  输入:集合+一元谓词  --> Collection<T> + (T)->bool
  功能:找到集合中第一个满足谓词条件的元素的迭代器

  删除后导空白符:
  string trim_right(string str){
    s.erase(find_if(s.rbegin(),s.rend(),is_not_space).base(),s.end()); //删除 [从右到左的一个非空白符,终点) 之间的空白符
    return s;
  }
  
  组合有:
  string trim(string s){
    return trim_left(trim_right(std::move(s)));
  }
  值传递:不改变外界状态

5.集合分割 
  partition函数:
  输入:集合+一元谓词  --> Collection<T> + (T)->bool
  功能:对集合中的元素进行重排,分成两部分
       将复合谓词条件的元素排在前面,不符合的排在后面
  输出:指向第二部分第一个元素的迭代器

  stable_partition函数:类似partition,但可以保持同类元素顺序的相对性
                       比如A和B都不满足谓词条件,A排在B前面
                       那么排序后,A依旧会排在B签名
  
  例子:
  lady first
  partition(people.begin(),people.end(),is_female)

  UI例子见27

6.names_for的实现
1)循环
template<typename FilterFunction>
vector<string> names_for(const vector<person_t>& people,FilterFunction filter){
  vector<string> result;

  for(const auto& p : people)
    if(filter(p))
      result.push_back(name(p));

  return result;
}
该函数对外是纯的 --> 没有改变外界变量
但函数内部维护状态变量,循环处理集合时,若filter为true,则会修改状态变量

2)递归

递归处理集合的思路:
a.将集合看做两部分:首元素+剩下的集合
b.处理首元素 + 对剩下的集合进行递归处理

template<typename FilterFunction
         typename Iterator>
vector<string> names_for_helper(Iterator people_begin,Iterator people_end,  //用迭代器表示输入集合 --> 不直接拷贝容器
                                FilterFunction filter
                                vector<string> collected){                 //贯穿整个递归层,进行结果收集
  if(people_begin == people_end)
    return colleced;
  else{

    const auto head = *head_begin;
    if(filter(head))
      collected.push_back(name(head));
          
    return names_for_helper(people_begin+1,people_end,            //尾递归:递归语句是函数中的最后一句
                            filter,                                 编译器可以将尾递归转为循环,减少函数栈的开销
                                                                    所以不采用return的形式向上层返回中间结果
                                                                                
                            std::move(collected));                       //移动，避免拷贝开销
  }

}

//对外接口
template<typename FilterFunction
         typename Iterator>
vector<string> names_for_helper(Iterator people_begin,Iterator people_end,  
                                FilterFunction filter
                                ){                 
  return names_for_helper(people_begin,people_end,filter,{})
}

消除了所有的中间状态变量
但递归结构稍显复杂
可以使用结构简单的折叠

3)折叠:逐步构建并累积 --> 
vector<string> append_name_if(vector<string> collected,const person_t& person){
  if(filter(perosn))
    collected.push_back(name(person));
  return collected;
}
....
return moving_accumulate(people.cbegin(),people.cend(),  //moving版本:可以对累积的中间结果触发移动语义,而非拷贝语义
                         vector<string>{},
                         append_name_if)

