


1.Linux中目标文件为ELF文件
  包括4类:
  1)可重定位文件
    俗称静态库
    包含代码和数据，可用于链接成可执行文件或共享目标文件

  2)可执行文件
    包含可以直接执行的程序

  3)共享目标文件
    俗称动态库
    可以和静态库和动态库链接形成新的动态库

  4)核心转储文件
    当进程意外终止时
    系统可以将 该进程地址空间中的内容 以及 其他信息转储生成文件

2.ELF文件的基本格式
  1)文件头 
    描述整个文件的文件属性:文件是否可执行，目标硬件,OS，程序入口地址(若为可执行文件)
    以及section table --> 记录各个section在文件中的偏移位置以及section的属性
  2)text section
    程序指令，只读
  3)data section
    初始化的全局变量和静态变量
  4)bss section
    未初始化的全局变量和静态变量 --> 变量值为0 --> 所以在文件没有必要保存很多0,只需要记录所有这类变量的大小总和即可 --> size
    加载程序后，为bss section分配size大小的虚拟地址空间
    

3.程序的指令和数据分开存放的原因:
  1)程序加载后，可以会为指令和数据分别分配一个虚存区
    指令区只读，数据区可读写
    这样可以防止程序的指令 在运行时 被篡改

  2)现代CPU会为 数据和指令 分别设置cache
    可提高cache命中率

4.例子
hello.c代码为:

-----------------------------------------------------------------------------------
#include <stdio.h>

int printf(const char*,...);

int global_init_var = 84;     //data
int global_uninit_var;      


void func1(int i){
  printf("%d\n",i);
}


int main(){

  static int static_var = 85;   //data
  static int static_var2;       //bss
  
  int a = 1;
  int b;

  func1(static_var+static_var2+a+b);
  return a;
}
-----------------------------------------------------------------------------------


使用命令objdump -h hello.o查看目标文件的基本内容:
-----------------------------------------------------------------------------------
hello.o:     file format elf64-x86-64

Sections:
Idx Name          Size      VMA               LMA               File off  Algn
  0 .text         00000055  0000000000000000  0000000000000000  00000040  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000008  0000000000000000  0000000000000000  00000098  2**2
                  CONTENTS, ALLOC, LOAD, DATA

  2 .bss          00000004  0000000000000000  0000000000000000  000000a0  2**2
                  ALLOC

  3 .rodata       00000004  0000000000000000  0000000000000000  000000a0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .comment      00000012  0000000000000000  0000000000000000  000000a4  2**0
                  CONTENTS, READONLY
  5 .note.GNU-stack 00000000  0000000000000000  0000000000000000  000000b6  2**0
                  CONTENTS, READONLY
  6 .eh_frame     00000058  0000000000000000  0000000000000000  000000b8  2**3
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
-----------------------------------------------------------------------------------

相关解释:
  1)CONTENTS:表示该section在文件中存在.
  2)bss:存放 未初始化的全局变量和局部静态变量 的总量大小
        在此处只有static_var2 ---> 4字节
        其没有CONTENTS属性，表明其在文件中并不存在
        其只记录了一个数字，表示载入程序后，需要在内存中为bss section分配多少内存

        此处没有将global_uninit_var的大小记录到bss中.
        原因:和编译器的实现相关.
             有些编译器不会将其记录到bss中.
             只是预留一个未实体定义的全局变量符号(弱符号).等最终链接形成可执行文件时，再于bss中记录其大小

        编译单元内部可见的静态变量大小会记录在bss中 -->比如给global_uninit_var添加static修饰

  3)rodata:只读数据段.
           比如字符常量，数字，只读变量(const).
           在此处为字符常量:"%d\n\0" --->  4字节
           载入程序后，可以为其分配 只读虚存区，保证程序安全性

命令:objdump -s -d hello.o
 -s:可以将所有section的内容以16进制显示，
 -d:可以对目标文件进行反汇编
-----------------------------------------------------------------------------------
hello.o:     file format elf64-x86-64

//重点关注
Contents of section .data:
 0000 54000000 55000000                    54 00 00 00 00对应int global_init_var = 84 --> 可见其为大端存储
Contents of section .rodata:
 0000 25640a00                             %d..            

Disassembly of section .text:

0000000000000000 <func1>:
   0:	55                   	push   %rbp           //保存调用者栈基址
   1:	48 89 e5             	mov    %rsp,%rbp      //%rbp指向被调者的栈基址  

   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	89 7d fc             	mov    %edi,-0x4(%rbp)   //edi保存第一参数
   b:	8b 45 fc             	mov    -0x4(%rbp),%eax
   e:	89 c6                	mov    %eax,%esi
  10:	bf 00 00 00 00       	mov    $0x0,%edi
  15:	b8 00 00 00 00       	mov    $0x0,%eax
  1a:	e8 00 00 00 00       	callq  1f <func1+0x1f>   //调用1f处的函数,printf为外部符号.跳转地址先标记为下一条指令地址
  1f:	90                   	nop                      
  20:	c9                   	leaveq                   //mov %rbp,%rsp  pop %rbp --> 恢复调用者的栈基址
  21:	c3                   	retq                     //弹出返回地址给程序计数器

0000000000000022 <main>:
  22:	55                   	push   %rbp
  23:	48 89 e5             	mov    %rsp,%rbp

  26:	48 83 ec 10          	sub    $0x10,%rsp
  2a:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  31:	8b 15 00 00 00 00    	mov    0x0(%rip),%edx        # 37 <main+0x15> ??????????????????
  37:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # 3d <main+0x1b>
  3d:	01 c2                	add    %eax,%edx
  3f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  42:	01 c2                	add    %eax,%edx
  44:	8b 45 f8             	mov    -0x8(%rbp),%eax
  47:	01 d0                	add    %edx,%eax
  49:	89 c7                	mov    %eax,%edi            
  4b:	e8 00 00 00 00       	callq  50 <main+0x2e>       //调用func1
  50:	8b 45 fc             	mov    -0x4(%rbp),%eax      //返回值放在eax中
  53:	c9                   	leaveq 
  54:	c3                   	retq
-----------------------------------------------------------------------------------

5.ELF常见段:
  1).text,.data,.bss
  2).rodata1    存放只读数据，比如字符串常量，全局const变量
  3).comment    存放编译器版本信息
  4).debug      调试信息
  5).dynamic    动态链接部分
  6).hash       符号哈希表
  7).line       调试时的行号表 --> 源代码行号 与 编译后指令的 对应表
  8).strtab     存储ELF文件中用到的各种字符串
  9).symtab     符号表
  10).shstrtab  段名表
  11).plt,.got  动态链接的跳转表和全局入口表
  12).init.fini 程序初始化与终结 代码段

6.ELF文件头
  可用readelf -h xx.o查看ELF文件头
  hello.o的ELF文件头:
Elf Header:
  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 
  Class:                             ELF64
  Data:                              2's complement, little endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - System V
  ABI Version:                       0
  Type:                              REL (Relocatable file)         //其他两种类型:EXEC(可执行文件)，DYN(共享目标文件)
  Machine:                           Advanced Micro Devices X86-64  //使用平台
  Version:                           0x1
  Entry point address:               0x0          //ELF程序的入口虚拟地址,OS在加载该程序后从此地址开始执行进程的指令
                                                  //可重定位文件没有入口地址 --> 值为0
  Start of program headers:          0 (bytes into file)  
  Start of section headers:          1024 (bytes into file)   //段表在文件中的偏移
  Flags:                             0x0
  Size of this header:               64 (bytes)
  Size of program headers:           0 (bytes)
  Number of program headers:         0
  //段表相关
  Size of section headers:           64 (bytes)
  Number of section headers:         13
  Section header string table index: 12

  ELF文件头结构以及相关常数定义在/usr/include/elf.h

7.段表(Section headers)
  ELF文件中含有各种各样的段
  段表则描述了各个段的meta-data,比如段名,段长,在文件中的偏移，读写权限...
  编译器，链接器和装载器都是依靠段表来 定位和访问各个段的属性
  用readelf -S xx.o查看段表
  hello.o的段表
re 13 section headers, starting at offset 0x400:

Section Headers:
  [Nr] Name              Type          Address    Offset     Size      EntSize  Flags  Link  Info  Align
  [ 0]                   NULL          000000     00000000   00000000  0000000    0     0     0
  [ 1] .text             PROGBITS      000000     00000040   00000055  0000000   AX     0     0     1
  [ 2] .rela.text        RELA          000000     000002f0   00000078  0000018    I    10     1     8
  [ 3] .data             PROGBITS      000000     00000098   00000008  0000000   WA     0     0     4
  [ 4] .bss              NOBITS        000000     000000a0   00000004  0000000   WA     0     0     4
  [ 5] .rodata           PROGBITS      000000     000000a0   00000004  0000000    A     0     0     1
  [ 6] .comment          PROGBITS      000000     000000a4   0000012   0000001   MS     0     0     1
  [ 7] .note.GNU-stack   PROGBITS      000000     000000b6   0000000   0000000          0     0     1
  [ 8] .eh_frame         PROGBITS      000000     000000b8   00000058  0000000    A     0     0     8
  [ 9] .rela.eh_frame    RELA          000000     00000368   00000030  0000018    I     10    8     8
  [10] .symtab           SYMTAB        000000     00000110   00000180  0000018          11    11    8
  [11] .strtab           STRTAB        000000     00000290   0000005e  0000000          0     0     1
  [12] .shstrtab         STRTAB        000000     00000398   00000061  0000000          0     0     1
Key to Flags:
  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),
  L (link order), O (extra OS processing required), G (group), T (TLS),
  C (compressed), x (unknown), o (OS specific), E (exclude),
  l (large), p (processor specific)

  可见，一共有12个有效的段
  各个字段意义:
  1)Type 
    段的名字只在 链接和编译 过程中有意义，其不能真正地表示段的类型
    Type才能表示段的类型
    常见的Type取值:
    a.NULL 
      无效段
    b.PROGBITS 
      程序段 -> 比如代码段,数据段
    c.SYMTAB
      表示改段的内容为符号表
      每个目标文件都有一个符号表，记录目标文件中使用的所有符号
      常见的符号:
      1.函数名/变量名
        其符号值就是其地址
      2.在本目标文件中含有实体定义的全局符号，可被其他目标文件引用
        比如hello.o中的func1,global_init_var

      3.在本目标文件中引用的全局符号 --> 实体定义没有在本目标文件中 --> External Symbol
        比如hello.o中的printf

      4.段名
        这种符号由编译器产生,其值就为该段的起始地址
        比如hello.o中的.text

      5.局部符号 
        只在编译单元内部可见,对于其他目标文件来说"不可见" --> 在链接过程中被忽略
        比如hello.o中的static_var,static_var2
        使用nm xx.o或者readelf -s xx.o查看符号表
        比如readelf -s xx.o:
        symbol table '.symtab' contains 17 entries:
          Num:    Value         Size Type    Bind   Vis      Ndx Name
          0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND 
          1: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS hello.c
          2: 0000000000000000     0 SECTION LOCAL  DEFAULT    1 
          3: 0000000000000000     0 SECTION LOCAL  DEFAULT    3 
          4: 0000000000000000     0 SECTION LOCAL  DEFAULT    4 
          5: 0000000000000000     4 OBJECT  LOCAL  DEFAULT    4 a
          6: 0000000000000000     0 SECTION LOCAL  DEFAULT    5 
          7: 0000000000000004     4 OBJECT  LOCAL  DEFAULT    3 static_var.2432
          8: 0000000000000004     4 OBJECT  LOCAL  DEFAULT    4 static_var2.2433
          9: 0000000000000000     0 SECTION LOCAL  DEFAULT    7 
         10: 0000000000000000     0 SECTION LOCAL  DEFAULT    8 
         11: 0000000000000000     0 SECTION LOCAL  DEFAULT    6 
         12: 0000000000000000     4 OBJECT  GLOBAL DEFAULT    3 global_init_var
         13: 0000000000000004     4 OBJECT  GLOBAL DEFAULT  COM global_uninit_var
         14: 0000000000000000    34 FUNC    GLOBAL DEFAULT    1 func1     
         15: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND printf
         16: 0000000000000022    51 FUNC    GLOBAL DEFAULT    1 main

        字段解释:
        1)Type
          符号类型
          a.NOTYPE  ->  未知类型
          b.OBJECT  ->  该符号表示一个数据对象,比如变量，数组
          c.FUNC    ->  该符号表示函数或其他可执行代码(闭包)  -> 比如func1，main
          d.SECTION ->  该符号表示一个段
          e.FILE    ->  表示文件名，一般是目标文件对应的源文件名  -> 比如hello.c
        2)Bind 
          从可见性来区分符号的类型
          a.LOCAL   ->  局部符号，目标文件的外部不可见
          b.GLOBAL  ->  全局符号，外部可见
          c.WEAK    ->  弱引用
        3)NDX
          如果符号定义在本目标文件中，那么该值表示 符号所在的段在段表中的下标
          其他特殊的值:
          a.ABS     ->  表示该符号包含了一个绝对的值，文件的符号就是此类型
          b.COMMON  ->  表示该符号是COMMON块类型的符号
                        未初始化的全局符号就是此类型
          c.UNDEF   ->  未定义符号.表示该符号在本目标文件中被引用，但定义在其他文件中

          通过objdump -t可以查看各个符号所属的段

        4)VALUE
          符号值
          a.若符号定义在本目标文件中，且不是COMMON块类型  --> 定义在本目标文件中的全局符号(变量/函数),比如func1,main
            那么VALUE表示该符号在段中的偏移
          b.若是COMMON类型                                --> 比如global_uninit_var
            那么VALUE表示该符号的对齐属性
          c.在可执行文件中
            VALUE表示符号的虚拟地址 -->  对动态链接器有用

    d.STRTAB
      字符串表
      ELF文件中的普通字符串，比如变量名都是存在字符串表中
      而段表中用到的字符串，比如段名，则存放在 段表字符串表中 --> .shstrtab
      在ELF文件中，所有用到字符串的地方都用 该字符串在相应表的偏移表示 --> 80页

    e.RELA
      内容为重定位表
      若代码段或者数据段中含有对 地址的引用
      那么就需要用重定位表将其记录下来    --> 在本例中，.text段中
      它的Link表示 其使用的符号表 在段表中的下标
      它的Info表示 该重定位表记录的是哪一个段的重定位信息

    f.HASH
      符号表的hash表
    g.DYNAMIC
      内容为动态链接信息
    h.NOBITS
      表示该段在文件中没有内容  --> .bss段
      
  2)Flag
    表示该段在进程虚拟地址空间中的属性
    常见取值:
    a.WRITE
      可写
    b.ALLOC
      表示该段必须在进程空间中分配空间
      有些 包含指示信息的段 不需要在进程空间中分配空间
    c.EXECINSTR
      表示该段在进程空间中可被执行 --> 代码段
  常见的段的Type + Flag --> 78页

  3)Address
    如果该段可以被加载到进程空间中
    那么该字段表示该段在进程空间中的虚拟地址

  4)Offset
    该段在文件中的偏移

  5)Align
    段的Address的对齐要求
    比如Align = 8 表示Address要与2^8对齐

  6)Link + Info  
    只有当段与链接有关时(比如重定位表，符号表)，这两个字段才有意义 --> 79页
    
8.特殊符号
  用ld链接器来链接生产可执行文件时，其会自动定义一些特殊的符号
  用户可在程序中直接声明并使用之
  比如:__executable_start:程序的起始地址    
       __etext:代码段结束地址等

9.C++的函数签名
  每个函数都有一个唯一的函数签名，其包含了函数的特征信息，包括函数名，参数类型，其所在的类和名称等
  比如:int N::C::func(int)
       int func(int)
       二者函数名相同 --> 重载函数   
  编译器在编译时，会根据函数签名，对函数符号进行修饰，修饰后的符号也是唯一的 --> 以此来区分重载函数
  比如:
  程序:
   1:int func(int);
   2:float func(int);
   class C{
     3:int func(int);
     class C2{
       4:int func(int);
     }
   }
   namespace N{
     5:int func(int);
     class C{
       6:int func(int);
     }
   }
   6个函数的签名以及修饰后的符号为:
   1:int func(int)                  _Z4funci
   2:float func(float)              _Z4funcf
   3:int C::func(int)               _ZN1C4funcEi
   4:int C::C2::func(int)           _ZN1C2C24funcEi
   5:int N::func(int)               _ZN1N4funcEi
   6:int N::C::func(int)            _ZN1N1C4funcEi
   可见:C++的名称修饰方法:
   _Z {N1名称空间名 | 类名} 函数名长度  函数名  E+参数列表
   
   用c++filt可以解析被修饰过的符号:c++filt _ZN1N1C4funcEi --> N::C::fund(int)

10.在C++程序中可以嵌入C语言代码
   extern "C"{
    c codes.....
   }
   在Linux平台下，g++编译器不会对extern C中的代码进行修饰
   小例子:
  
   namespace myname{
     int var = 42;      //按照g++的修饰规则，其会被修饰为: _ZNmyname3varE
   }
   extern "C" int _ZN6myname3varE;   //声明一个外部符号
  int main(){
    std::cout << _ZNmyname3varE << std::endl;   --> 会得到42
    return 0;
  }

11.C/C++编译器默认 函数和初始化了全局变量 为强符号
                   未初始化的全局变量为弱符号
   可通过__attribute__((weak))来修饰某个符号为弱符号
   比如:
    extern int ext;     外部符号的引用
    int weak;
    int string = 1;
    __attribute__((weak)) weak2 = 2;

   链接器按照以下规则来选择和处理 定义在多个目标文件中的全局符号:
   1)不允许强符号被多次定义，否则报 重复定义 的错误
   2)如果该符号在一个目标文件中为全局符号,且在其他目标文件中为弱符号
     那么选择强符号
   3)若该符号在所有目标文件中都是弱符号，那么选择占用空间最大的那一个
     比如一个为int型，一个为double型，最后选择double型
     全局性的弱符号类型为COMMON
     在目标文件中:
      未初始化的静态变量的大小记录在bss段中
      未初始化的全局变量标记为COMMON类型   -->   变量最终的大小需要在链接后才能确定
                                                 所以在目标文件中，其不能记录在.bss段中
                                                 链接后，其大小记录在.bss段中


   强引用:若在目标文件A中引用了 实体定义 没有位于本目标文件中的 符号
          且在链接后，依然没找到该符号的实体定义，那么链接器就会报符号未定义的错误
   弱引用:弱没找到实体定义，链接器不会报错
          链接器默认其为0，或者一个特殊的值，以便程序程序代码能够识别
   可用__attribute__((weakref))在目标文件中修饰函数声明，表示该目标文件对该函数的引用为弱引用

   弱符号的作用: 库中的弱符号可被用于定义的强符号覆盖   
                 从而使得程序可以使用自定义版本的函数
   弱引用的作用: 程序可以将 对某些扩展功能模块的引用 定义为弱引用
                 扩展模块,程序和其他目标文件一起链接后，模块功能可以正常使用
                 若去掉了扩展模块，程序也可以正常链接，只是缺少了相应的功能
                 使得程序的功能更加容易裁剪和组合 --> 只需修改链接的文件而不需要修改源码


12.若在编译时添加了-g参数，那么会在 目标文件或可执行文件 中生成调试信息 --> 其会占用很大的空间
   所以在开发完程序准备发布时，应该去掉对用户没用的调试信息 --> strip xxx
   
